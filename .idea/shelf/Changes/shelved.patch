Index: allure-results/24dd2e35-d1cf-4c4c-b17c-889088c69e83-container.json
===================================================================
diff --git a/allure-results/24dd2e35-d1cf-4c4c-b17c-889088c69e83-container.json b/allure-results/24dd2e35-d1cf-4c4c-b17c-889088c69e83-container.json
deleted file mode 100644
--- a/allure-results/24dd2e35-d1cf-4c4c-b17c-889088c69e83-container.json	(revision 68abd430f82de6dedf2b26c3e7669a3e705fcd50)
+++ /dev/null	(revision 68abd430f82de6dedf2b26c3e7669a3e705fcd50)
@@ -1,1 +0,0 @@
-{"uuid":"24dd2e35-d1cf-4c4c-b17c-889088c69e83","name":"Default Suite","children":["c54da87d-d87f-4d23-8eaf-808c4e179595"],"befores":[],"afters":[],"start":1714041718292,"stop":1714041721615}
\ No newline at end of file
Index: allure-results/26f0b235-59d2-41d9-bd84-5e7682e8d8f9-container.json
===================================================================
diff --git a/allure-results/26f0b235-59d2-41d9-bd84-5e7682e8d8f9-container.json b/allure-results/26f0b235-59d2-41d9-bd84-5e7682e8d8f9-container.json
deleted file mode 100644
--- a/allure-results/26f0b235-59d2-41d9-bd84-5e7682e8d8f9-container.json	(revision 68abd430f82de6dedf2b26c3e7669a3e705fcd50)
+++ /dev/null	(revision 68abd430f82de6dedf2b26c3e7669a3e705fcd50)
@@ -1,1 +0,0 @@
-{"uuid":"26f0b235-59d2-41d9-bd84-5e7682e8d8f9","name":"org.pftest.projects.testcases.SampleTest","children":["93f2d34a-7dba-4a91-95f3-de2ecb505d44"],"befores":[],"afters":[],"start":1714041718296,"stop":1714041721613}
\ No newline at end of file
Index: allure-results/93f2d34a-7dba-4a91-95f3-de2ecb505d44-result.json
===================================================================
diff --git a/allure-results/93f2d34a-7dba-4a91-95f3-de2ecb505d44-result.json b/allure-results/93f2d34a-7dba-4a91-95f3-de2ecb505d44-result.json
deleted file mode 100644
--- a/allure-results/93f2d34a-7dba-4a91-95f3-de2ecb505d44-result.json	(revision 68abd430f82de6dedf2b26c3e7669a3e705fcd50)
+++ /dev/null	(revision 68abd430f82de6dedf2b26c3e7669a3e705fcd50)
@@ -1,1 +0,0 @@
-{"uuid":"93f2d34a-7dba-4a91-95f3-de2ecb505d44","historyId":"663345a58c4e429edc3232763b629288","fullName":"org.pftest.projects.testcases.SampleTest.sampleTest","labels":[{"name":"package","value":"org.pftest.projects.testcases.SampleTest"},{"name":"testClass","value":"org.pftest.projects.testcases.SampleTest"},{"name":"testMethod","value":"sampleTest"},{"name":"parentSuite","value":"Default Suite"},{"name":"suite","value":"pftest"},{"name":"subSuite","value":"org.pftest.projects.testcases.SampleTest"},{"name":"host","value":"MacBook-Pro-cua-quynhniee.local"},{"name":"thread","value":"35446@MacBook-Pro-cua-quynhniee.local.main(1)"},{"name":"framework","value":"testng"},{"name":"language","value":"java"},{"name":"feature","value":"Sample Test Feature"},{"name":"epic","value":"Sample Test"}],"links":[],"name":"sampleTest","status":"passed","statusDetails":{"known":false,"muted":false,"flaky":false},"stage":"finished","steps":[],"attachments":[],"parameters":[],"start":1714041721505,"stop":1714041721507}
\ No newline at end of file
Index: allure-results/420c0c33-b280-4125-ad13-21461990e23b-container.json
===================================================================
diff --git a/allure-results/420c0c33-b280-4125-ad13-21461990e23b-container.json b/allure-results/420c0c33-b280-4125-ad13-21461990e23b-container.json
deleted file mode 100644
--- a/allure-results/420c0c33-b280-4125-ad13-21461990e23b-container.json	(revision 68abd430f82de6dedf2b26c3e7669a3e705fcd50)
+++ /dev/null	(revision 68abd430f82de6dedf2b26c3e7669a3e705fcd50)
@@ -1,1 +0,0 @@
-{"uuid":"420c0c33-b280-4125-ad13-21461990e23b","name":"org.pftest.base.BaseTest.createDriver","children":["93f2d34a-7dba-4a91-95f3-de2ecb505d44"],"description":"","befores":[{"name":"createDriver","status":"passed","stage":"finished","description":"","steps":[],"attachments":[],"parameters":[],"start":1714041718327,"stop":1714041721436}],"afters":[],"start":1714041718327,"stop":1714041721436}
\ No newline at end of file
Index: src/test/java/org/pftest/projects/pages/pages/AdminShopifyPage.java
===================================================================
diff --git a/src/test/java/org/pftest/projects/pages/pages/AdminShopifyPage.java b/src/test/java/org/pftest/projects/pages/pages/AdminShopifyPage.java
deleted file mode 100644
--- a/src/test/java/org/pftest/projects/pages/pages/AdminShopifyPage.java	(revision 68abd430f82de6dedf2b26c3e7669a3e705fcd50)
+++ /dev/null	(revision 68abd430f82de6dedf2b26c3e7669a3e705fcd50)
@@ -1,21 +0,0 @@
-package org.pftest.projects.pages.pages;
-
-import org.openqa.selenium.WebDriver;
-import org.openqa.selenium.WebElement;
-import org.openqa.selenium.support.FindBy;
-import org.openqa.selenium.support.PageFactory;
-import org.pftest.projects.CommonPage;
-
-import java.util.List;
-import java.util.UUID;
-
-import static org.pftest.keywords.WebUI.openWebsite;
-
-// page_url = https://admin.shopify.com/store/quynhquynhiee/apps/pageflybackend-9/pages
-public class AdminShopifyPage extends CommonPage {
-
-    public void openHomePage() {
-        String URL = "https://admin.shopify.com/store/quynhquynhiee/apps/rc-pagefly-1/editor?type=home&id=" + UUID.randomUUID();
-        openWebsite(URL);
-    }
-}
\ No newline at end of file
Index: allure-results/c54da87d-d87f-4d23-8eaf-808c4e179595-container.json
===================================================================
diff --git a/allure-results/c54da87d-d87f-4d23-8eaf-808c4e179595-container.json b/allure-results/c54da87d-d87f-4d23-8eaf-808c4e179595-container.json
deleted file mode 100644
--- a/allure-results/c54da87d-d87f-4d23-8eaf-808c4e179595-container.json	(revision 68abd430f82de6dedf2b26c3e7669a3e705fcd50)
+++ /dev/null	(revision 68abd430f82de6dedf2b26c3e7669a3e705fcd50)
@@ -1,1 +0,0 @@
-{"uuid":"c54da87d-d87f-4d23-8eaf-808c4e179595","name":"pftest","children":["93f2d34a-7dba-4a91-95f3-de2ecb505d44"],"befores":[],"afters":[],"start":1714041718295,"stop":1714041721610}
\ No newline at end of file
Index: allure-results/f16c9e6c-573a-4fa5-ac0c-3827c67ebc54-container.json
===================================================================
diff --git a/allure-results/f16c9e6c-573a-4fa5-ac0c-3827c67ebc54-container.json b/allure-results/f16c9e6c-573a-4fa5-ac0c-3827c67ebc54-container.json
deleted file mode 100644
--- a/allure-results/f16c9e6c-573a-4fa5-ac0c-3827c67ebc54-container.json	(revision 68abd430f82de6dedf2b26c3e7669a3e705fcd50)
+++ /dev/null	(revision 68abd430f82de6dedf2b26c3e7669a3e705fcd50)
@@ -1,1 +0,0 @@
-{"uuid":"f16c9e6c-573a-4fa5-ac0c-3827c67ebc54","name":"org.pftest.base.BaseTest.closeDriver","children":["93f2d34a-7dba-4a91-95f3-de2ecb505d44"],"description":"","befores":[],"afters":[{"name":"closeDriver","status":"passed","stage":"finished","description":"","steps":[],"attachments":[],"parameters":[],"start":1714041721512,"stop":1714041721608}],"start":1714041721512,"stop":1714041721608}
\ No newline at end of file
Index: src/main/java/org/pftest/driver/BrowserFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.pftest.driver;\n\nimport org.openqa.selenium.MutableCapabilities;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.safari.SafariDriver;\nimport org.openqa.selenium.safari.SafariOptions;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic enum BrowserFactory {\n    CHROME {\n        public WebDriver createDriver() {\n            return new ChromeDriver();\n        }\n\n        public ChromeOptions getOptions() {\n            ChromeOptions options = new ChromeOptions();\n            options.addArguments(\"--disable-extensions\");\n            options.addArguments(\"--disable-infobars\");\n            options.addArguments(\"--disable-notifications\");\n            options.addArguments(\"--remote-allow-origins=*\");\n            options.setAcceptInsecureCerts(true);\n\n            Map<String, Object> prefs = new HashMap<String, Object>();\n            prefs.put(\"profile.default_content_setting_values.notifications\", 2);\n            prefs.put(\"credentials_enable_service\", false);\n            prefs.put(\"profile.password_manager_enabled\", false);\n            prefs.put(\"autofill.profile_enabled\", false);\n            options.setExperimentalOption(\"prefs\", prefs);\n\n            return options;\n        }\n    },\n    SAFARI {\n        public WebDriver createDriver() {\n            return new SafariDriver(getOptions());\n        }\n\n        public SafariOptions getOptions() {\n            SafariOptions options = new SafariOptions();\n            options.setAutomaticInspection(false);\n\n            return options;\n        }\n    };\n\n    public abstract WebDriver createDriver();\n\n    public abstract MutableCapabilities getOptions();\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/pftest/driver/BrowserFactory.java b/src/main/java/org/pftest/driver/BrowserFactory.java
--- a/src/main/java/org/pftest/driver/BrowserFactory.java	(revision 68abd430f82de6dedf2b26c3e7669a3e705fcd50)
+++ b/src/main/java/org/pftest/driver/BrowserFactory.java	(date 1714094984402)
@@ -6,6 +6,7 @@
 import org.openqa.selenium.chrome.ChromeOptions;
 import org.openqa.selenium.safari.SafariDriver;
 import org.openqa.selenium.safari.SafariOptions;
+import org.pftest.constants.FrameworkConstants;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -17,12 +18,7 @@
         }
 
         public ChromeOptions getOptions() {
-            ChromeOptions options = new ChromeOptions();
-            options.addArguments("--disable-extensions");
-            options.addArguments("--disable-infobars");
-            options.addArguments("--disable-notifications");
-            options.addArguments("--remote-allow-origins=*");
-            options.setAcceptInsecureCerts(true);
+            ChromeOptions options = getChromeOptions();
 
             Map<String, Object> prefs = new HashMap<String, Object>();
             prefs.put("profile.default_content_setting_values.notifications", 2);
@@ -31,6 +27,22 @@
             prefs.put("autofill.profile_enabled", false);
             options.setExperimentalOption("prefs", prefs);
 
+            return options;
+        }
+
+        private static ChromeOptions getChromeOptions() {
+            ChromeOptions options = new ChromeOptions();
+
+            options.setBinary(FrameworkConstants.BROWSER_BINARY);
+            options.setBinary("/bin/google-chrome-stable");
+            options.addArguments("--user-data-dir=" + FrameworkConstants.USER_DATA_DIR);
+            options.addArguments("--profile-directory=" + FrameworkConstants.PROFILE_DIRECTORY);
+            options.addArguments("--disable-extensions");
+            options.addArguments("--disable-infobars");
+            options.addArguments("--disable-notifications");
+            options.addArguments("--remote-allow-origins=*");
+
+            options.setAcceptInsecureCerts(true);
             return options;
         }
     },
Index: src/main/java/org/pftest/enums/Platform.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/pftest/enums/Platform.java b/src/main/java/org/pftest/enums/Platform.java
new file mode 100644
--- /dev/null	(date 1714047589660)
+++ b/src/main/java/org/pftest/enums/Platform.java	(date 1714047589660)
@@ -0,0 +1,5 @@
+package org.pftest.enums;
+
+public enum Platform {
+    WEB, MOBILE, DESKTOP
+}
Index: src/main/java/org/pftest/keywords/WebUI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * Copyright (c) 2022 Anh Tester\n * Automation Framework Selenium\n */\n\npackage org.pftest.keywords;\n\nimport org.pftest.constants.FrameworkConstants;\nimport org.pftest.driver.DriverManager;\nimport org.pftest.enums.FailureHandling;\nimport org.pftest.helpers.Helpers;\nimport org.pftest.report.AllureManager;\nimport org.pftest.utils.BrowserInfoUtils;\nimport org.pftest.utils.DateUtils;\nimport org.pftest.utils.LogUtils;\nimport com.google.common.util.concurrent.Uninterruptibles;\nimport com.google.zxing.BinaryBitmap;\nimport com.google.zxing.LuminanceSource;\nimport com.google.zxing.MultiFormatReader;\nimport com.google.zxing.Result;\nimport com.google.zxing.client.j2se.BufferedImageLuminanceSource;\nimport com.google.zxing.common.HybridBinarizer;\nimport io.qameta.allure.Step;\nimport org.apache.commons.io.FileUtils;\nimport org.openqa.selenium.Dimension;\nimport org.openqa.selenium.Point;\nimport org.openqa.selenium.*;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport org.openqa.selenium.devtools.DevTools;\nimport org.openqa.selenium.devtools.HasDevTools;\nimport org.openqa.selenium.devtools.v123.network.Network;\nimport org.openqa.selenium.devtools.v123.network.model.Headers;\nimport org.openqa.selenium.interactions.Actions;\nimport org.openqa.selenium.print.PrintOptions;\nimport org.openqa.selenium.support.ui.ExpectedCondition;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.Select;\nimport org.openqa.selenium.support.ui.WebDriverWait;\nimport org.testng.Assert;\nimport org.testng.asserts.SoftAssert;\n\nimport javax.annotation.Nullable;\nimport javax.imageio.ImageIO;\nimport java.awt.*;\nimport java.awt.datatransfer.StringSelection;\nimport java.awt.event.InputEvent;\nimport java.awt.event.KeyEvent;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.IOException;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.text.SimpleDateFormat;\nimport java.time.Duration;\nimport java.util.List;\nimport java.util.*;\n\n/**\n * Keyword WebUI is a generic class that is a preprocessed library with many custom functions from Selenium and Java.\n * Returns is a Class containing Static functions. Callback is used by taking the class name and dotting the function name (WebUI.method)\n */\npublic class WebUI {\n\n    /**\n     * The SoftAssert object is created\n     */\n    private static SoftAssert softAssert = new SoftAssert();\n\n    /**\n     * Stop the Soft Assert of TestNG\n     */\n    public static void stopSoftAssertAll() {\n        softAssert.assertAll();\n    }\n\n    /**\n     * Smart Waits contains waitForPageLoaded and sleep functions\n     */\n    public static void smartWait() {\n        if (FrameworkConstants.ACTIVE_PAGE_LOADED.trim().toLowerCase().equals(\"true\")) {\n            waitForPageLoaded();\n        }\n        sleep(FrameworkConstants.WAIT_SLEEP_STEP);\n    }\n\n    /**\n     * Take entire-page screenshot and add to Extent report and Allure report\n     *\n     * @param screenName Screenshot name\n     */\n    public static void addScreenshotToReport(String screenName) {\n        if (FrameworkConstants.SCREENSHOT_ALL_STEPS.equals(\"true\")) {\n//            if (ExtentTestManager.getExtentTest() != null) {\n//                ExtentReportManager.addScreenShot(Helpers.makeSlug(screenName));\n//            }\n            //CaptureHelpers.captureScreenshot(DriverManager.getDriver(), Helpers.makeSlug(screenshotName));\n            AllureManager.takeScreenshotStep();\n        }\n    }\n\n    /**\n     * Take a screenshot of a specific web element. The captured image will be saved in '.png' format.\n     *\n     * @param screenName Screenshot name\n     */\n    public static void takeElementScreenshot(By by, String screenName) {\n        SimpleDateFormat dateFormat = new SimpleDateFormat(\"dd-MM-yyyy HH-mm-ss\");\n        try {\n            String path = Helpers.getCurrentDir() + FrameworkConstants.EXPORT_CAPTURE_PATH;\n            File file = new File(path);\n            if (!file.exists()) {\n                LogUtils.info(\"No Folder: \" + path);\n                file.mkdir();\n                LogUtils.info(\"Folder created: \" + file);\n            }\n\n            File source = getWebElement(by).getScreenshotAs(OutputType.FILE);\n            // result.getName() gets the name of the test case and assigns it to the screenshot file name\n            FileUtils.copyFile(source, new File(path + \"/\" + screenName + \"_\" + dateFormat.format(new Date()) + \".png\"));\n            LogUtils.info(\"Screenshot taken: \" + screenName);\n            LogUtils.info(\"Screenshot taken current URL: \" + getCurrentUrl());\n        } catch (Exception e) {\n            System.out.println(\"Exception while taking screenshot: \" + e.getMessage());\n        }\n    }\n\n    /**\n     * Take entire-page screenshot, including overflow parts. The captured image will be saved in '.png' format.\n     * This method simulates a scroll action to take a number of shots and merge them together to make a full-page screenshot.\n     *\n     * @param screenName Screenshot name\n     */\n    public static void takeFullPageScreenshot(String screenName) {\n        SimpleDateFormat dateFormat = new SimpleDateFormat(\"dd-MM-yyyy HH-mm-ss\");\n        try {\n            String path = Helpers.getCurrentDir() + FrameworkConstants.EXPORT_CAPTURE_PATH;\n            File file = new File(path);\n            if (!file.exists()) {\n                LogUtils.info(\"No Folder: \" + path);\n                file.mkdir();\n                LogUtils.info(\"Folder created: \" + file);\n            }\n\n            LogUtils.info(\"Driver for Screenshot: \" + DriverManager.getDriver());\n            // Create reference of TakesScreenshot\n            TakesScreenshot ts = (TakesScreenshot) DriverManager.getDriver();\n            // Call the capture screenshot function - getScreenshotAs\n            File source = ts.getScreenshotAs(OutputType.FILE);\n            // result.getName() gets the name of the test case and assigns it to the screenshot file name\n            FileUtils.copyFile(source, new File(path + \"/\" + screenName + \"_\" + dateFormat.format(new Date()) + \".png\"));\n            LogUtils.info(\"Screenshot taken: \" + screenName);\n            LogUtils.info(\"Screenshot taken current URL: \" + getCurrentUrl());\n        } catch (Exception e) {\n            System.out.println(\"Exception while taking screenshot: \" + e.getMessage());\n        }\n    }\n\n\n    /**\n     * Get the Download Directory path\n     *\n     * @return the download directory path\n     */\n    public static String getPathDownloadDirectory() {\n        String path = \"\";\n        String machine_name = System.getProperty(\"user.home\");\n        path = machine_name + File.separator + \"Downloads\";\n        return path;\n    }\n\n    /**\n     * Count files in Download Directory\n     *\n     * @return files total in download directory\n     */\n    public static int countFilesInDownloadDirectory() {\n        String pathFolderDownload = getPathDownloadDirectory();\n        File file = new File(pathFolderDownload);\n        int i = 0;\n        for (File listOfFiles : file.listFiles()) {\n            if (listOfFiles.isFile()) {\n                i++;\n            }\n        }\n        return i;\n    }\n\n    /**\n     * Verify files in the Download Directory contain the specified file (CONTAIN)\n     *\n     * @param fileName the specified file\n     * @return true if file is contain in download directory, else is false\n     */\n    public static boolean verifyFileContainsInDownloadDirectory(String fileName) {\n        boolean flag = false;\n        try {\n            String pathFolderDownload = getPathDownloadDirectory();\n            File dir = new File(pathFolderDownload);\n            File[] files = dir.listFiles();\n            if (files == null || files.length == 0) {\n                flag = false;\n            }\n            for (int i = 0; i < files.length; i++) {\n                if (files[i].getName().contains(fileName)) {\n                    flag = true;\n                }\n            }\n            return flag;\n        } catch (Exception e) {\n            e.getMessage();\n            return flag;\n        }\n    }\n\n    /**\n     * Verify files in the Download Directory contain the specified file (EQUALS)\n     *\n     * @param fileName the specified file\n     * @return true if file is contain in download directory, else is false\n     */\n    public static boolean verifyFileEqualsInDownloadDirectory(String fileName) {\n        boolean flag = false;\n        try {\n            String pathFolderDownload = getPathDownloadDirectory();\n            File dir = new File(pathFolderDownload);\n            File[] files = dir.listFiles();\n            if (files == null || files.length == 0) {\n                flag = false;\n            }\n            for (int i = 0; i < files.length; i++) {\n                if (files[i].getName().equals(fileName)) {\n                    flag = true;\n                }\n            }\n            return flag;\n        } catch (Exception e) {\n            e.getMessage();\n            return flag;\n        }\n    }\n\n    /**\n     * Verify the file is downloaded (CONTAIN)\n     *\n     * @param fileName       the specified file\n     * @param timeoutSeconds System will wait at most timeout (seconds) to return result\n     * @return true if file is downloaded, else is false\n     */\n    public static boolean verifyDownloadFileContainsName(String fileName, int timeoutSeconds) {\n        boolean check = false;\n        int i = 0;\n        while (i < timeoutSeconds) {\n            boolean exist = verifyFileContainsInDownloadDirectory(fileName);\n            if (exist == true) {\n                i = timeoutSeconds;\n                return check = true;\n            }\n            sleep(1);\n            i++;\n        }\n        return check;\n    }\n\n    /**\n     * Verify the file is downloaded (EQUALS)\n     *\n     * @param fileName       the specified file\n     * @param timeoutSeconds System will wait at most timeout (seconds) to return result\n     * @return true if file is downloaded, else is false\n     */\n    public static boolean verifyDownloadFileEqualsName(String fileName, int timeoutSeconds) {\n        boolean check = false;\n        int i = 0;\n        while (i < timeoutSeconds) {\n            boolean exist = verifyFileEqualsInDownloadDirectory(fileName);\n            if (exist == true) {\n                i = timeoutSeconds;\n                return check = true;\n            }\n            sleep(1);\n            i++;\n        }\n        return check;\n    }\n\n    /**\n     * Delete all files in Download Directory\n     */\n    public static void deleteAllFileInDownloadDirectory() {\n        try {\n            String pathFolderDownload = getPathDownloadDirectory();\n            File file = new File(pathFolderDownload);\n            File[] listOfFiles = file.listFiles();\n            for (int i = 0; i < listOfFiles.length; i++) {\n                if (listOfFiles[i].isFile()) {\n                    new File(listOfFiles[i].toString()).delete();\n                }\n            }\n        } catch (Exception e) {\n            e.getMessage();\n        }\n    }\n\n    /**\n     * Delete all files in Download Directory\n     *\n     * @param pathDirectory the Download Directory path\n     */\n    public static void deleteAllFileInDirectory(String pathDirectory) {\n        try {\n            File file = new File(pathDirectory);\n            File[] listOfFiles = file.listFiles();\n            for (int i = 0; i < listOfFiles.length; i++) {\n                if (listOfFiles[i].isFile()) {\n                    new File(listOfFiles[i].toString()).delete();\n                }\n            }\n        } catch (Exception e) {\n            e.getMessage();\n        }\n    }\n\n    /**\n     * Verify the file is downloaded with JavascriptExecutor (EQUALS)\n     *\n     * @param fileName the specified file\n     * @return true if file is downloaded, else is false\n     */\n    @Step(\"Verify File Downloaded With JS [Equals]: {0}\")\n    public static boolean verifyFileDownloadedWithJS_Equals(String fileName) {\n        openWebsite(\"chrome://downloads\");\n        sleep(3);\n        JavascriptExecutor js = (JavascriptExecutor) DriverManager.getDriver();\n        String element = (String) js.executeScript(\"return document.querySelector('downloads-manager').shadowRoot.querySelector('#downloadsList downloads-item').shadowRoot.querySelector('#show').getAttribute('title')\");\n        File file = new File(element);\n        LogUtils.info(element);\n        LogUtils.info(file.getName());\n        if (file.exists() && file.getName().trim().equals(fileName)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Verify the file is downloaded with JavascriptExecutor (CONTAINS)\n     *\n     * @param fileName the specified file\n     * @return true if file is downloaded, else is false\n     */\n    @Step(\"Verify File Downloaded With JS [Contains]: {0}\")\n    public static boolean verifyFileDownloadedWithJS_Contains(String fileName) {\n        openWebsite(\"chrome://downloads\");\n        sleep(3);\n        JavascriptExecutor js = (JavascriptExecutor) DriverManager.getDriver();\n        String element = (String) js.executeScript(\"return document.querySelector('downloads-manager').shadowRoot.querySelector('#downloadsList downloads-item').shadowRoot.querySelector('#show').getAttribute('title')\");\n        File file = new File(element);\n        LogUtils.info(element);\n        LogUtils.info(file.getName());\n        if (file.exists() && file.getName().trim().contains(fileName)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Login as Authentication on URL\n     *\n     * @param url\n     * @param username\n     * @param password\n     */\n    @Step(\"Get to URL {0} with authentication\")\n    public static void getToUrlAuthentication(String url, String username, String password) {\n        // Get the devtools from the running driver and create a session\n        DevTools devTools = ((HasDevTools) DriverManager.getDriver()).getDevTools();\n        devTools.createSession();\n\n        // Enable the Network domain of devtools\n        devTools.send(Network.enable(Optional.of(100000), Optional.of(100000), Optional.of(100000)));\n        String auth = username + \":\" + password;\n\n        // Encoding the username and password using Base64 (java.util)\n        String encodeToString = Base64.getEncoder().encodeToString(auth.getBytes());\n\n        // Pass the network header -> Authorization : Basic <encoded String>\n        Map<String, Object> headers = new HashMap<>();\n        headers.put(\"Authorization\", \"Basic \" + encodeToString);\n        devTools.send(Network.setExtraHTTPHeaders(new Headers(headers)));\n\n        LogUtils.info(\"getToUrlAuthentication with URL: \" + url);\n        LogUtils.info(\"getToUrlAuthentication with Username: \" + username);\n        LogUtils.info(\"getToUrlAuthentication with Password: \" + password);\n        // Load the application url\n        openWebsite(url);\n        Uninterruptibles.sleepUninterruptibly(Duration.ofSeconds(3));\n    }\n\n    /**\n     * Get code text of QR Code image\n     *\n     * @param by là an element of object type By\n     * @return text of QR Code\n     */\n    @Step(\"Get QR code from image {0}\")\n    public static String getQRCodeFromImage(By by) {\n        String qrCodeURL = WebUI.getAttributeElement(by, \"src\");\n        //Create an object of URL Class\n        URL url = null;\n        try {\n            url = new URL(qrCodeURL);\n        } catch (MalformedURLException e) {\n            throw new RuntimeException(e);\n        }\n        //Pass the URL class object to store the file as image\n        BufferedImage bufferedimage = null;\n        try {\n            bufferedimage = ImageIO.read(url);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n        // Process the image\n        LuminanceSource luminanceSource = new BufferedImageLuminanceSource(bufferedimage);\n        BinaryBitmap binaryBitmap = new BinaryBitmap(new HybridBinarizer(luminanceSource));\n        //To Capture details of QR code\n        Result result = null;\n        try {\n            result = new MultiFormatReader().decode(binaryBitmap);\n        } catch (com.google.zxing.NotFoundException e) {\n            throw new RuntimeException(e);\n        }\n        return result.getText();\n    }\n\n    //Handle HTML5 validation message and valid value\n\n    /**\n     * Verify HTML5 message of element required field\n     *\n     * @param by is an element of type By\n     * @return true/false corresponds to required\n     */\n    @Step(\"Verify HTML5 message of element {0} required field\")\n    public static Boolean verifyHTML5RequiredField(By by) {\n        JavascriptExecutor js = (JavascriptExecutor) DriverManager.getDriver();\n        Boolean verifyRequired = (Boolean) js.executeScript(\"return arguments[0].required;\", getWebElement(by));\n        return verifyRequired;\n    }\n\n    /**\n     * Verify the HTML5 message of the element has a value of Valid\n     *\n     * @param by is an element of type By\n     * @return true/false corresponds to Valid\n     */\n    @Step(\"Verify HTML5 message of element {0} valid\")\n    public static Boolean verifyHTML5ValidValueField(By by) {\n        JavascriptExecutor js = (JavascriptExecutor) DriverManager.getDriver();\n        Boolean verifyValid = (Boolean) js.executeScript(\"return arguments[0].validity.valid;\", getWebElement(by));\n        return verifyValid;\n    }\n\n    /**\n     * Get HTML5 message of element\n     *\n     * @param by is an element of type By\n     * @return the Text string value of the notification (String)\n     */\n    @Step(\"Get HTML5 message of element {0}\")\n    public static String getHTML5MessageField(By by) {\n        JavascriptExecutor js = (JavascriptExecutor) DriverManager.getDriver();\n        String message = (String) js.executeScript(\"return arguments[0].validationMessage;\", getWebElement(by));\n        return message;\n    }\n\n    /**\n     * Set window sizes.\n     *\n     * @param widthPixel  is Width with Pixel\n     * @param heightPixel is Height with Pixel\n     */\n    public static void setWindowSize(int widthPixel, int heightPixel) {\n        DriverManager.getDriver().manage().window().setSize(new Dimension(widthPixel, heightPixel));\n    }\n\n    /**\n     * Move the window to the selected position X, Y from the top left corner 0\n     *\n     * @param X (int) - horizontal\n     * @param Y (int) - vertical\n     */\n    public static void setWindowPosition(int X, int Y) {\n        DriverManager.getDriver().manage().window().setPosition(new Point(X, Y));\n    }\n\n    /**\n     * Maximize window\n     */\n    public static void maximizeWindow() {\n        DriverManager.getDriver().manage().window().maximize();\n    }\n\n    /**\n     * Minimize window\n     */\n    public static void minimizeWindow() {\n        DriverManager.getDriver().manage().window().minimize();\n    }\n\n    /**\n     * Take a screenshot at the element location. Do not capture the entire screen.\n     *\n     * @param by          is an element of type By\n     * @param elementName to name the .png image file\n     */\n    public static void screenshotElement(By by, String elementName) {\n        File scrFile = getWebElement(by).getScreenshotAs(OutputType.FILE);\n        try {\n            FileUtils.copyFile(scrFile, new File(\"./\" + elementName + \".png\"));\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    /**\n     * Print the current page in the browser.\n     * Note: Only works in headless mode\n     *\n     * @param endPage is the total number of pages to print. Adjective 1.\n     * @return is content of page form PDF file\n     */\n    public static String printPage(int endPage) {\n        PrintOptions printOptions = new PrintOptions();\n        //From page 1 to end page\n        printOptions.setPageRanges(\"1-\" + endPage);\n\n        Pdf pdf = ((PrintsPage) DriverManager.getDriver()).print(printOptions);\n        return pdf.getContent();\n    }\n\n    /**\n     * Get the JavascriptExecutor object created\n     *\n     * @return JavascriptExecutor\n     */\n    public static JavascriptExecutor getJsExecutor() {\n        JavascriptExecutor js = (JavascriptExecutor) DriverManager.getDriver();\n        return js;\n    }\n\n    /**\n     * Convert the By object to the WebElement\n     *\n     * @param by is an element of type By\n     * @return Returns a WebElement object\n     */\n    public static WebElement getWebElement(By by) {\n        return DriverManager.getDriver().findElement(by);\n    }\n\n    /**\n     * Find multiple elements with the locator By object\n     *\n     * @param by is an element of type By\n     * @return Returns a List of WebElement objects\n     */\n    public static List<WebElement> getWebElements(By by) {\n        return DriverManager.getDriver().findElements(by);\n    }\n\n    /**\n     * Print out the message in the Console log\n     *\n     * @param object passes any object\n     */\n    public static void logConsole(@Nullable Object object) {\n        System.out.println(object);\n    }\n\n    /**\n     * Forced wait with unit of Seconds\n     *\n     * @param second is a positive integer corresponding to the number of Seconds\n     */\n    public static void sleep(double second) {\n        try {\n            Thread.sleep((long) (second * 1000));\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * Allow browser popup notifications on the website\n     *\n     * @return the value set Allow - belongs to the ChromeOptions object\n     */\n    @Step(\"Allow Notifications\")\n    public static ChromeOptions notificationsAllow() {\n        // Create a Map to store options\n        Map<String, Object> prefs = new HashMap<String, Object>();\n\n        // Add keys and values to Map as follows to disable browser notifications\n        // Pass argument 1 to ALLOW and 2 to BLOCK\n        prefs.put(\"profile.default_content_setting_values.notifications\", 1);\n\n        // Create a ChromeOptions session\n        ChromeOptions options = new ChromeOptions();\n\n        // Use the setExperimentalOption function to execute the value through the above prefs object\n        options.setExperimentalOption(\"prefs\", prefs);\n\n        //Returns the set value of the ChromeOptions object\n        return options;\n    }\n\n    /**\n     * Block browser popup notifications on the website\n     *\n     * @return the value of the setup Block - belongs to the ChromeOptions object\n     */\n    @Step(\"Blocked Notifications\")\n    public static ChromeOptions notificationsBlock() {\n        // Create a Map to store options\n        Map<String, Object> prefs = new HashMap<String, Object>();\n\n        // Add keys and values to Map as follows to disable browser notifications\n        // Pass argument 1 to ALLOW and 2 to BLOCK\n        prefs.put(\"profile.default_content_setting_values.notifications\", 2);\n\n        // Create a ChromeOptions session\n        ChromeOptions options = new ChromeOptions();\n\n        // Use the setExperimentalOption function to execute the value through the above prefs object\n        options.setExperimentalOption(\"prefs\", prefs);\n\n        //Returns the set value of the ChromeOptions object\n        return options;\n    }\n\n    /**\n     * Uploading files with a click shows a form to select local files on your computer\n     *\n     * @param by       is an element of type By\n     * @param filePath the absolute path to the file on your computer\n     */\n    @Step(\"Upload File with open Local Form\")\n    public static void uploadFileWithLocalForm(By by, String filePath) {\n        smartWait();\n\n        Actions action = new Actions(DriverManager.getDriver());\n        //Click to open form upload\n        action.moveToElement(getWebElement(by)).click().perform();\n        sleep(3);\n\n        // Create Robot class\n        Robot robot = null;\n        try {\n            robot = new Robot();\n        } catch (AWTException e) {\n            e.printStackTrace();\n        }\n\n        // Copy File path to Clipboard\n        StringSelection str = new StringSelection(filePath);\n        Toolkit.getDefaultToolkit().getSystemClipboard().setContents(str, null);\n\n        //Check OS for Windows\n        if (BrowserInfoUtils.isWindows()) {\n            // Press Control+V to paste\n            robot.keyPress(KeyEvent.VK_CONTROL);\n            robot.keyPress(KeyEvent.VK_V);\n\n            // Release the Control V\n            robot.keyRelease(KeyEvent.VK_CONTROL);\n            robot.keyRelease(KeyEvent.VK_V);\n            robot.delay(2000);\n            // Press Enter\n            robot.keyPress(KeyEvent.VK_ENTER);\n            robot.keyRelease(KeyEvent.VK_ENTER);\n        }\n        //Check OS for MAC\n        if (BrowserInfoUtils.isMac()) {\n            robot.keyPress(KeyEvent.VK_META);\n            robot.keyPress(KeyEvent.VK_TAB);\n            robot.keyRelease(KeyEvent.VK_META);\n            robot.keyRelease(KeyEvent.VK_TAB);\n            robot.delay(1000);\n\n            //Open goto MAC\n            robot.keyPress(KeyEvent.VK_META);\n            robot.keyPress(KeyEvent.VK_SHIFT);\n            robot.keyPress(KeyEvent.VK_G);\n            robot.keyRelease(KeyEvent.VK_META);\n            robot.keyRelease(KeyEvent.VK_SHIFT);\n            robot.keyRelease(KeyEvent.VK_G);\n\n            //Paste the clipboard value\n            robot.keyPress(KeyEvent.VK_META);\n            robot.keyPress(KeyEvent.VK_V);\n            robot.keyRelease(KeyEvent.VK_META);\n            robot.keyRelease(KeyEvent.VK_V);\n            robot.delay(1000);\n\n            //Press Enter key to close the Goto MAC and Upload on MAC\n            robot.keyPress(KeyEvent.VK_ENTER);\n            robot.keyRelease(KeyEvent.VK_ENTER);\n            robot.keyPress(KeyEvent.VK_ENTER);\n            robot.keyRelease(KeyEvent.VK_ENTER);\n        }\n\n        LogUtils.info(\"Upload File with Local Form: \" + filePath);\n//        if (ExtentTestManager.getExtentTest() != null) {\n//            ExtentReportManager.info(\"Upload File with Local Form: \" + filePath);\n//        }\n        AllureManager.saveTextLog(\"Upload File with Local Form: \" + filePath);\n\n    }\n\n    /**\n     * Upload files by dragging the link directly into the input box\n     *\n     * @param by       passes an element of object type By\n     * @param filePath absolute path to the file\n     */\n    @Step(\"Upload File with SendKeys\")\n    public static void uploadFileWithSendKeys(By by, String filePath) {\n        smartWait();\n\n        waitForElementVisible(by).sendKeys(filePath);\n\n        LogUtils.info(\"Upload File with SendKeys\");\n//        if (ExtentTestManager.getExtentTest() != null) {\n//            ExtentReportManager.info(\"Upload File with SendKeys\");\n//        }\n        AllureManager.saveTextLog(\"Upload File with SendKeys\");\n\n    }\n\n    /**\n     * Get current URL from current driver\n     *\n     * @return the current URL as String\n     */\n    @Step(\"Get Current URL\")\n    public static String getCurrentUrl() {\n        smartWait();\n        LogUtils.info(\"Get Current URL: \" + DriverManager.getDriver().getCurrentUrl());\n//        if (ExtentTestManager.getExtentTest() != null) {\n//            ExtentReportManager.info(\"Get Current URL: \" + DriverManager.getDriver().getCurrentUrl());\n//        }\n        AllureManager.saveTextLog(\"Get Current URL: \" + DriverManager.getDriver().getCurrentUrl());\n        return DriverManager.getDriver().getCurrentUrl();\n    }\n\n    /**\n     * Get current web page's title\n     *\n     * @return the current URL as String\n     */\n    @Step(\"Get Page Title\")\n    public static String getPageTitle() {\n        smartWait();\n        String title = DriverManager.getDriver().getTitle();\n        LogUtils.info(\"Get Page Title: \" + DriverManager.getDriver().getTitle());\n//        if (ExtentTestManager.getExtentTest() != null) {\n//            ExtentReportManager.info(\"Get Page Title: \" + DriverManager.getDriver().getTitle());\n//        }\n        AllureManager.saveTextLog(\"Get Page Title: \" + DriverManager.getDriver().getTitle());\n        return title;\n    }\n\n    /**\n     * Verify the web page's title equals with the specified title\n     *\n     * @param pageTitle The title of the web page that needs verifying\n     * @return the current URL as String\n     */\n    @Step(\"Verify Page Title equals {0}\")\n    public static boolean VerifyPageTitle(String pageTitle) {\n        smartWait();\n        return getPageTitle().equals(pageTitle);\n    }\n\n\n    /**\n     * Verify if the given text presents anywhere in the page source.\n     *\n     * @param text\n     * @return true/false\n     */\n    @Step(\"Verify Page sources Contains Text {0}\")\n    public static boolean verifyPageContainsText(String text) {\n        smartWait();\n        return DriverManager.getDriver().getPageSource().contains(text);\n    }\n\n    /**\n     * Verify if the given web element is checked.\n     *\n     * @param by Represent a web element as the By object\n     * @return true if the element is checked, otherwise false.\n     */\n    @Step(\"Verify Element Checked {0}\")\n    public static boolean verifyElementChecked(By by) {\n        smartWait();\n\n        boolean checked = getWebElement(by).isSelected();\n        if (checked == true) {\n            return true;\n        } else {\n            Assert.assertTrue(false, \"The element NOT checked.\");\n            return false;\n        }\n    }\n\n    /**\n     * Verify if the given web element is checked.\n     *\n     * @param by      Represent a web element as the By object\n     * @param message the custom message if false\n     * @return true if the element is checked, otherwise false.\n     */\n    @Step(\"Verify Element Checked {0}\")\n    public static boolean verifyElementChecked(By by, String message) {\n        smartWait();\n        waitForElementVisible(by);\n\n        boolean checked = getWebElement(by).isSelected();\n\n        if (checked == true) {\n            return true;\n        } else {\n            Assert.assertTrue(false, message);\n            return false;\n        }\n    }\n\n    //Handle dropdown\n\n    /**\n     * Select value in dropdown dynamic (not pure Select Option)\n     *\n     * @param objectListItem is the locator of the list item as a By object\n     * @param text           the value to select as Text of the item\n     * @return click to select a specified item with Text value\n     */\n    @Step(\"Select Option Dynamic by Text {0}\")\n    public static boolean selectOptionDynamic(By objectListItem, String text) {\n        smartWait();\n        //For dynamic dropdowns (div, li, span,...not select options)\n        try {\n            List<WebElement> elements = getWebElements(objectListItem);\n\n            for (WebElement element : elements) {\n                LogUtils.info(element.getText());\n                if (element.getText().toLowerCase().trim().contains(text.toLowerCase().trim())) {\n                    element.click();\n                    return true;\n                }\n            }\n        } catch (Exception e) {\n            LogUtils.info(e.getMessage());\n            e.getMessage();\n        }\n        return false;\n    }\n\n    /**\n     * Verify All Options contains the specified text (select option)\n     *\n     * @param by   Represent a web element as the By object\n     * @param text the specified text\n     * @return true if all option contains the specified text\n     */\n    @Step(\"Verify Option Dynamic Exist by Text {0}\")\n    public static boolean verifyOptionDynamicExist(By by, String text) {\n        smartWait();\n\n        try {\n            List<WebElement> elements = getWebElements(by);\n            \n            for (WebElement element : elements) {\n                LogUtils.info(element.getText());\n                if (element.getText().toLowerCase().trim().contains(text.toLowerCase().trim())) {\n                    return true;\n                }\n            }\n        } catch (Exception e) {\n            LogUtils.info(e.getMessage());\n            e.getMessage();\n        }\n        return false;\n    }\n\n    /**\n     * Get total number of options the given web element has. (select option)\n     *\n     * @param objectListItem Represent a web element as the By object\n     * @return total number of options\n     */\n    @Step(\"Get total of Option Dynamic with list element {0}\")\n    public static int getOptionDynamicTotal(By objectListItem) {\n        smartWait();\n\n        LogUtils.info(\"Get total of Option Dynamic with list element. \" + objectListItem);\n        try {\n            List<WebElement> elements = getWebElements(objectListItem);\n            return elements.size();\n        } catch (Exception e) {\n            LogUtils.info(e.getMessage());\n            e.getMessage();\n        }\n        return 0;\n    }\n\n    /**\n     * Select the options with the given label (displayed text).\n     *\n     * @param by   Represent a web element as the By object\n     * @param text the specified text of option\n     */\n    @Step(\"Select Option by Text {0}\")\n    public static void selectOptionByText(By by, String text) {\n        smartWait();\n        Select select = new Select(getWebElement(by));\n        select.selectByVisibleText(text);\n        LogUtils.info(\"Select Option \" + by + \"by text \" + text);\n    }\n\n    /**\n     * Select the options with the given value.\n     *\n     * @param by    Represent a web element as the By object\n     * @param value the specified value of option\n     */\n    @Step(\"Select Option by Value {0}\")\n    public static void selectOptionByValue(By by, String value) {\n        smartWait();\n\n        Select select = new Select(getWebElement(by));\n        select.selectByValue(value);\n        LogUtils.info(\"Select Option \" + by + \"by value \" + value);\n    }\n\n    /**\n     * Select the options with the given index.\n     *\n     * @param by    Represent a web element as the By object\n     * @param index the specified index of option\n     */\n    @Step(\"Select Option by Index {0}\")\n    public static void selectOptionByIndex(By by, int index) {\n        smartWait();\n\n        Select select = new Select(getWebElement(by));\n        select.selectByIndex(index);\n        LogUtils.info(\"Select Option \" + by + \"by index \" + index);\n    }\n\n    /**\n     * Verify the number of options equals the specified total\n     *\n     * @param by    Represent a web element as the By object\n     * @param total the specified options total\n     */\n    @Step(\"Verify Option Total equals {0}\")\n    public static void verifyOptionTotal(By by, int total) {\n        smartWait();\n\n        Select select = new Select(getWebElement(by));\n        LogUtils.info(\"Verify Option Total equals: \" + total);\n        Assert.assertEquals(total, select.getOptions().size());\n    }\n\n    /**\n     * Verify if the options at the given text are selected.\n     *\n     * @param by   Represent a web element as the By object\n     * @param text the specified options text\n     * @return true if options given selected, else is false\n     */\n    @Step(\"Verify Selected Option by Text {0}\")\n    public static boolean verifySelectedByText(By by, String text) {\n        smartWait();\n\n        Select select = new Select(getWebElement(by));\n        LogUtils.info(\"Verify Option Selected by text: \" + select.getFirstSelectedOption().getText());\n\n        if (select.getFirstSelectedOption().getText().equals(text)) {\n            return true;\n        } else {\n            Assert.assertEquals(select.getFirstSelectedOption().getText(), text, \"The option NOT selected. \" + by);\n            return false;\n        }\n    }\n\n    /**\n     * Verify if the options at the given value are selected.\n     *\n     * @param by    Represent a web element as the By object\n     * @param value the specified options value\n     * @return true if options given selected, else is false\n     */\n    @Step(\"Verify Selected Option by Value {0}\")\n    public static boolean verifySelectedByValue(By by, String value) {\n        smartWait();\n\n        Select select = new Select(getWebElement(by));\n        LogUtils.info(\"Verify Option Selected by value: \" + select.getFirstSelectedOption().getAttribute(\"value\"));\n        if (select.getFirstSelectedOption().getAttribute(\"value\").equals(value)) {\n            return true;\n        } else {\n            Assert.assertEquals(select.getFirstSelectedOption().getAttribute(\"value\"), value, \"The option NOT selected. \" + by);\n            return false;\n        }\n    }\n\n    /**\n     * Verify if the options at the given index are selected.\n     *\n     * @param by    Represent a web element as the By object\n     * @param index the specified options index\n     * @return true if options given selected, else is false\n     */\n    @Step(\"Verify Selected Option by Index {0}\")\n    public static boolean verifySelectedByIndex(By by, int index) {\n        smartWait();\n\n        Select select = new Select(getWebElement(by));\n        int indexFirstOption = select.getOptions().indexOf(select.getFirstSelectedOption());\n        LogUtils.info(\"The First Option selected by index: \" + indexFirstOption);\n        LogUtils.info(\"Expected index: \" + index);\n        if (indexFirstOption == index) {\n            return true;\n        } else {\n            Assert.assertTrue(false, \"The option NOT selected. \" + by);\n            return false;\n        }\n    }\n\n    /**\n     * Switch to iframe by index of iframe tag\n     *\n     * @param index index of iframe tag\n     */\n    @Step(\"Switch to Frame by Index: {0}\")\n    public static void switchToFrameByIndex(int index) {\n        smartWait();\n\n        WebDriverWait wait = new WebDriverWait(DriverManager.getDriver(), Duration.ofSeconds(FrameworkConstants.WAIT_EXPLICIT), Duration.ofMillis(500));\n        wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt(index));\n        //DriverManager.getDriver().switchTo().frame(Index);\n        LogUtils.info(\"Switch to Frame by Index. \" + index);\n    }\n\n    /**\n     * Switch to iframe by ID or Name of iframe tag\n     *\n     * @param IdOrName ID or Name of iframe tag\n     */\n    @Step(\"Switch to Frame by ID or Name: {0}\")\n    public static void switchToFrameByIdOrName(String IdOrName) {\n        smartWait();\n\n        WebDriverWait wait = new WebDriverWait(DriverManager.getDriver(), Duration.ofSeconds(FrameworkConstants.WAIT_EXPLICIT), Duration.ofMillis(500));\n        wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt(IdOrName));\n        LogUtils.info(\"Switch to Frame by ID or Name. \" + IdOrName);\n    }\n\n    /**\n     * Switch to iframe by Element is this iframe tag\n     *\n     * @param by iframe tag\n     */\n    @Step(\"Switch to Frame by Element {0}\")\n    public static void switchToFrameByElement(By by) {\n        smartWait();\n\n        WebDriverWait wait = new WebDriverWait(DriverManager.getDriver(), Duration.ofSeconds(FrameworkConstants.WAIT_EXPLICIT), Duration.ofMillis(500));\n        wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt(by));\n        LogUtils.info(\"Switch to Frame by Element. \" + by);\n    }\n\n    /**\n     * Switch to Default Content\n     */\n    @Step(\"Switch to Default Content\")\n    public static void switchToDefaultContent() {\n        smartWait();\n\n        DriverManager.getDriver().switchTo().defaultContent();\n        LogUtils.info(\"Switch to Default Content\");\n    }\n\n    /**\n     * Switch to iframe by position of iframe tag\n     *\n     * @param position index of iframe tag\n     */\n    @Step(\"Switch to Window or Tab by Position: {0}\")\n    public static void switchToWindowOrTabByPosition(int position) {\n        smartWait();\n\n        DriverManager.getDriver().switchTo().window(DriverManager.getDriver().getWindowHandles().toArray()[position].toString());\n        LogUtils.info(\"Switch to Window or Tab by Position: \" + position);\n    }\n\n    /**\n     * Switch to popup window by title\n     *\n     * @param title title of popup window\n     */\n    @Step(\"Switch to Window or Tab by Title: {0}\")\n    public static void switchToWindowOrTabByTitle(String title) {\n        smartWait();\n\n        //Store the ID of the original window\n        String originalWindow = DriverManager.getDriver().getWindowHandle();\n\n        WebDriverWait wait = new WebDriverWait(DriverManager.getDriver(), Duration.ofSeconds(FrameworkConstants.WAIT_EXPLICIT), Duration.ofMillis(500));\n        //Wait for the new window or tab\n        wait.until(ExpectedConditions.numberOfWindowsToBe(2));\n\n        //Loop through until we find a new window handle\n        for (String windowHandle : DriverManager.getDriver().getWindowHandles()) {\n            if (!originalWindow.contentEquals(windowHandle)) {\n                DriverManager.getDriver().switchTo().window(windowHandle);\n                if (DriverManager.getDriver().getTitle().equals(title)) {\n                    break;\n                }\n            }\n        }\n\n    }\n\n    /**\n     * Switch to popup window by URL\n     *\n     * @param url url of popup window\n     */\n    @Step(\"Switch to Window or Tab by Url: {0}\")\n    public static void switchToWindowOrTabByUrl(String url) {\n        smartWait();\n        //Store the ID of the original window\n        String originalWindow = DriverManager.getDriver().getWindowHandle();\n\n        WebDriverWait wait = new WebDriverWait(DriverManager.getDriver(), Duration.ofSeconds(FrameworkConstants.WAIT_EXPLICIT), Duration.ofMillis(500));\n        //Wait for the new window or tab\n        wait.until(ExpectedConditions.numberOfWindowsToBe(2));\n\n        //Loop through until we find a new window handle\n        for (String windowHandle : DriverManager.getDriver().getWindowHandles()) {\n            if (!originalWindow.contentEquals(windowHandle)) {\n                DriverManager.getDriver().switchTo().window(windowHandle);\n                if (DriverManager.getDriver().getCurrentUrl().equals(url)) {\n                    break;\n                }\n            }\n        }\n\n    }\n\n    /**\n     * Close current Window\n     */\n    @Step(\"Close current Window\")\n    public static void closeCurrentWindow() {\n        LogUtils.info(\"Close current Window.\" + getCurrentUrl());\n        DriverManager.getDriver().close();\n        LogUtils.info(\"Close current Window\");\n    }\n\n\n    /**\n     * Get the total number of popup windows the given web page.\n     *\n     * @param number the specified number\n     * @return true/false\n     */\n    @Step(\"Verify total of Windows or Tab\")\n    public static boolean verifyTotalOfWindowsOrTab(int number) {\n        return new WebDriverWait(DriverManager.getDriver(), Duration.ofSeconds(FrameworkConstants.WAIT_EXPLICIT)).until(ExpectedConditions.numberOfWindowsToBe(number));\n    }\n\n    /**\n     * Open new Tab\n     */\n    @Step(\"Open new Tab\")\n    public static void openNewTab() {\n        smartWait();\n        // Opens a new tab and switches to new tab\n        DriverManager.getDriver().switchTo().newWindow(WindowType.TAB);\n        LogUtils.info(\"Open new Tab\");\n    }\n\n    /**\n     * Open new Window\n     */\n    @Step(\"Open new Window\")\n    public static void openNewWindow() {\n        smartWait();\n        // Opens a new window and switches to new window\n        DriverManager.getDriver().switchTo().newWindow(WindowType.WINDOW);\n        LogUtils.info(\"Open new Window\");\n    }\n\n    /**\n     * Switch to Main Window\n     */\n    @Step(\"Switch to Main Window\")\n    public static void switchToMainWindow() {\n        smartWait();\n        DriverManager.getDriver().switchTo().window(DriverManager.getDriver().getWindowHandles().toArray()[0].toString());\n        LogUtils.info(\"Switch to Main Window.\" + DriverManager.getDriver());\n    }\n\n    /**\n     * Switch to Main Window by ID\n     *\n     * @param originalWindow ID of main window\n     */\n    @Step(\"Switch to Main Window by ID {0}\")\n    public static void switchToMainWindow(String originalWindow) {\n        smartWait();\n        DriverManager.getDriver().switchTo().window(originalWindow);\n        LogUtils.info(\"Switch to Main Window.\" + originalWindow);\n    }\n\n    /**\n     * Switch to Last Window\n     */\n    @Step(\"Switch to Last Window\")\n    public static void switchToLastWindow() {\n        smartWait();\n        Set<String> windowHandles = DriverManager.getDriver().getWindowHandles();\n        WebDriver newDriver = DriverManager.getDriver().switchTo().window(DriverManager.getDriver().getWindowHandles().toArray()[windowHandles.size() - 1].toString());\n        LogUtils.info(\"Switch to Last Window.\" + newDriver.getCurrentUrl());\n    }\n\n    /**\n     * Click Accept on Alert\n     */\n    @Step(\"Click Accept on Alert\")\n    public static void acceptAlert() {\n        sleep(FrameworkConstants.WAIT_SLEEP_STEP);\n        DriverManager.getDriver().switchTo().alert().accept();\n        LogUtils.info(\"Click Accept on Alert.\");\n    }\n\n    /**\n     * Click Dismiss on Alert\n     */\n    @Step(\"Click Dismiss on Alert\")\n    public static void dismissAlert() {\n        sleep(FrameworkConstants.WAIT_SLEEP_STEP);\n        DriverManager.getDriver().switchTo().alert().dismiss();\n        LogUtils.info(\"Click Dismiss on Alert.\");\n    }\n\n    /**\n     * Get text on Alert\n     */\n    @Step(\"Get text on Alert\")\n    public static String getTextAlert() {\n        sleep(FrameworkConstants.WAIT_SLEEP_STEP);\n        LogUtils.info(\"Get text ion alert: \" + DriverManager.getDriver().switchTo().alert().getText());\n        return DriverManager.getDriver().switchTo().alert().getText();\n    }\n\n    /**\n     * Set text on Alert\n     */\n    @Step(\"Set text on Alert {0}\")\n    public static void setTextAlert(String text) {\n        sleep(FrameworkConstants.WAIT_SLEEP_STEP);\n        DriverManager.getDriver().switchTo().alert().sendKeys(text);\n        LogUtils.info(\"Set \" + text + \" on Alert.\");\n    }\n\n    /**\n     * Verify if alert does present\n     *\n     * @param timeOut Timeout waiting for alert to present.(in seconds)\n     * @return true/false\n     */\n    @Step(\"Verify Alert present with timeout {0}\")\n    public static boolean verifyAlertPresent(int timeOut) {\n        try {\n            WebDriverWait wait = new WebDriverWait(DriverManager.getDriver(), Duration.ofSeconds(timeOut), Duration.ofMillis(500));\n            wait.until(ExpectedConditions.alertIsPresent());\n            return true;\n        } catch (Throwable error) {\n            LogUtils.error(\"Alert NOT Present.\");\n            Assert.fail(\"Alert NOT Present.\");\n            return false;\n        }\n    }\n\n    /**\n     * Get list text of specified elements\n     *\n     * @param by Represent a web element as the By object\n     * @return Text list of specified elements\n     */\n    @Step(\"Get List Element {0}\")\n    public static List<String> getListElementsText(By by) {\n        smartWait();\n\n        WebDriverWait wait = new WebDriverWait(DriverManager.getDriver(), Duration.ofSeconds(FrameworkConstants.WAIT_EXPLICIT), Duration.ofMillis(500));\n        wait.until(ExpectedConditions.visibilityOfElementLocated(by));\n\n        List<WebElement> listElement = getWebElements(by);\n        List<String> listText = new ArrayList<>();\n\n        for (WebElement e : listElement) {\n            listText.add(e.getText());\n        }\n\n        return listText;\n    }\n\n    /**\n     * Verify if a web element is present (findElements.size > 0).\n     *\n     * @param by Represent a web element as the By object\n     * @return true/false\n     */\n    @Step(\"Verify element exists {0}\")\n    public static boolean verifyElementExists(By by) {\n        smartWait();\n\n        boolean res;\n        List<WebElement> elementList = getWebElements(by);\n        if (elementList.size() > 0) {\n            res = true;\n            LogUtils.info(\"Element existing\");\n        } else {\n            res = false;\n            LogUtils.error(\"Element not exists\");\n\n        }\n        return res;\n    }\n\n\n    /**\n     * Verify if two object are equal.\n     *\n     * @param value1 The object one\n     * @param value2 The object two\n     * @return true/false\n     */\n    @Step(\"Verify Equals: {0} ---AND--- {1}\")\n    public static boolean verifyEquals(Object value1, Object value2) {\n        boolean result = value1.equals(value2);\n        if (result == true) {\n            LogUtils.info(\"Verify Equals: \" + value1 + \" = \" + value2);\n//            if (ExtentTestManager.getExtentTest() != null) {\n//                ExtentReportManager.pass(\"Verify Equals: \" + value1 + \" = \" + value2);\n//            }\n            AllureManager.saveTextLog(\"Verify Equals: \" + value1 + \" = \" + value2);\n        } else {\n            LogUtils.info(\"Verify Equals: \" + value1 + \" != \" + value2);\n//            if (ExtentTestManager.getExtentTest() != null) {\n//                ExtentReportManager.fail(\"Verify Equals: \" + value1 + \" != \" + value2);\n//            }\n            AllureManager.saveTextLog(\"Verify Equals: \" + value1 + \" != \" + value2);\n            Assert.assertEquals(value1, value2, value1 + \" != \" + value2);\n        }\n        return result;\n    }\n\n    /**\n     * Verify if two object are equal.\n     *\n     * @param value1  The object one\n     * @param value2  The object two\n     * @param message The custom message if false\n     * @return true/false\n     */\n    @Step(\"Verify Equals: {0} ---AND--- {1}\")\n    public static boolean verifyEquals(Object value1, Object value2, String message) {\n        boolean result = value1.equals(value2);\n        if (result == true) {\n            LogUtils.info(\"Verify Equals: \" + value1 + \" = \" + value2);\n//            if (ExtentTestManager.getExtentTest() != null) {\n//                ExtentReportManager.pass(\"Verify Equals: \" + value1 + \" = \" + value2);\n//            }\n            AllureManager.saveTextLog(\"Verify Equals: \" + value1 + \" = \" + value2);\n        } else {\n            LogUtils.info(\"Verify Equals: \" + value1 + \" != \" + value2);\n//            if (ExtentTestManager.getExtentTest() != null) {\n//                ExtentReportManager.fail(\"Verify Equals: \" + value1 + \" != \" + value2);\n//            }\n            AllureManager.saveTextLog(\"Verify Equals: \" + value1 + \" != \" + value2);\n            Assert.assertEquals(value1, value2, message);\n        }\n        return result;\n    }\n\n    /**\n     * Verify if the first object contains the second object.\n     *\n     * @param value1 The first object\n     * @param value2 The second object\n     * @return true/false\n     */\n    @Step(\"Verify Contains: {0} ---AND--- {1}\")\n    public static boolean verifyContains(String value1, String value2) {\n        boolean result = value1.contains(value2);\n        if (result == true) {\n            LogUtils.info(\"Verify Equals: \" + value1 + \" CONTAINS \" + value2);\n//            if (ExtentTestManager.getExtentTest() != null) {\n//                ExtentReportManager.pass(\"Verify Contains: \" + value1 + \" CONTAINS \" + value2);\n//            }\n            AllureManager.saveTextLog(\"Verify Contains: \" + value1 + \"CONTAINS\" + value2);\n        } else {\n            LogUtils.info(\"Verify Contains: \" + value1 + \" NOT CONTAINS \" + value2);\n//            if (ExtentTestManager.getExtentTest() != null) {\n//                ExtentReportManager.fail(\"Verify Contains: \" + value1 + \" NOT CONTAINS \" + value2);\n//            }\n            AllureManager.saveTextLog(\"Verify Contains: \" + value1 + \" NOT CONTAINS \" + value2);\n\n            Assert.assertEquals(value1, value2, value1 + \" NOT CONTAINS \" + value2);\n        }\n        return result;\n    }\n\n    /**\n     * Verify if the first object contains the second object.\n     *\n     * @param value1  The first object\n     * @param value2  The second object\n     * @param message The custom message if false\n     * @return true/false\n     */\n    @Step(\"Verify Contains: {0} ---AND--- {1}\")\n    public static boolean verifyContains(String value1, String value2, String message) {\n        boolean result = value1.contains(value2);\n        if (result == true) {\n            LogUtils.info(\"Verify Equals: \" + value1 + \" CONTAINS \" + value2);\n//            if (ExtentTestManager.getExtentTest() != null) {\n//                ExtentReportManager.pass(\"Verify Contains: \" + value1 + \" CONTAINS \" + value2);\n//            }\n            AllureManager.saveTextLog(\"Verify Contains: \" + value1 + \"CONTAINS\" + value2);\n        } else {\n            LogUtils.info(\"Verify Contains: \" + value1 + \" NOT CONTAINS \" + value2);\n//            if (ExtentTestManager.getExtentTest() != null) {\n//                ExtentReportManager.fail(\"Verify Contains: \" + value1 + \" NOT CONTAINS \" + value2);\n//            }\n            AllureManager.saveTextLog(\"Verify Contains: \" + value1 + \" NOT CONTAINS \" + value2);\n\n            Assert.assertEquals(value1, value2, message);\n        }\n        return result;\n    }\n\n    /**\n     * Verify the condition is true.\n     *\n     * @return true/false\n     */\n    @Step(\"Verify TRUE with condition: {0}\")\n    public static boolean verifyTrue(Boolean condition) {\n        if (condition == true) {\n            LogUtils.info(\"Verify TRUE: \" + condition);\n//            if (ExtentTestManager.getExtentTest() != null) {\n//                ExtentReportManager.pass(\"Verify TRUE: \" + condition);\n//            }\n            AllureManager.saveTextLog(\"Verify TRUE: \" + condition);\n        } else {\n            LogUtils.info(\"Verify TRUE: \" + condition);\n//            if (ExtentTestManager.getExtentTest() != null) {\n//                ExtentReportManager.fail(\"Verify TRUE: \" + condition);\n//            }\n            AllureManager.saveTextLog(\"Verify TRUE: \" + condition);\n\n            Assert.assertTrue(condition, \"The condition is FALSE.\");\n        }\n        return condition;\n    }\n\n    /**\n     * Verify the condition is true.\n     *\n     * @param message the custom message if false\n     * @return true/false\n     */\n    @Step(\"Verify TRUE with condition: {0}\")\n    public static boolean verifyTrue(Boolean condition, String message) {\n        if (condition == true) {\n            LogUtils.info(\"Verify TRUE: \" + condition);\n//            if (ExtentTestManager.getExtentTest() != null) {\n//                ExtentReportManager.pass(\"Verify TRUE: \" + condition);\n//            }\n            AllureManager.saveTextLog(\"Verify TRUE: \" + condition);\n        } else {\n            LogUtils.info(\"Verify TRUE: \" + condition);\n//            if (ExtentTestManager.getExtentTest() != null) {\n//                ExtentReportManager.fail(\"Verify TRUE: \" + condition);\n//            }\n            AllureManager.saveTextLog(\"Verify TRUE: \" + condition);\n\n            Assert.assertTrue(condition, message);\n        }\n        return condition;\n    }\n\n\n    /**\n     * Verify text of an element. (equals)\n     *\n     * @param by   Represent a web element as the By object\n     * @param text Text of the element to verify.\n     * @return true if the element has the desired text, otherwise false.\n     */\n    public static boolean verifyElementText(By by, String text) {\n        smartWait();\n        waitForElementVisible(by);\n\n        return getTextElement(by).trim().equals(text.trim());\n    }\n\n    /**\n     * Verify text of an element. (equals)\n     *\n     * @param by          Represent a web element as the By object\n     * @param text        Text of the element to verify.\n     * @param flowControl Specify failure handling schema (STOP_ON_FAILURE, CONTINUE_ON_FAILURE, OPTIONAL) to determine whether the execution should be allowed to continue or stop\n     * @return true if the element has the desired text, otherwise false.\n     */\n    @Step(\"Verify text of an element [Equals]\")\n    public static boolean verifyElementTextEquals(By by, String text, FailureHandling flowControl) {\n        smartWait();\n\n        waitForElementVisible(by);\n\n        boolean result = getTextElement(by).trim().equals(text.trim());\n\n        if (result == true) {\n            LogUtils.info(\"Verify text of an element [Equals]: \" + result);\n        } else {\n            LogUtils.warn(\"Verify text of an element [Equals]: \" + result);\n        }\n\n        if (flowControl.equals(FailureHandling.STOP_ON_FAILURE)) {\n            Assert.assertEquals(getTextElement(by).trim(), text.trim(), \"The actual text is '\" + getTextElement(by).trim() + \"' not equals '\" + text.trim() + \"'\");\n        }\n        if (flowControl.equals(FailureHandling.CONTINUE_ON_FAILURE)) {\n            softAssert.assertEquals(getTextElement(by).trim(), text.trim(), \"The actual text is '\" + getTextElement(by).trim() + \"' not equals '\" + text.trim() + \"'\");\n//            if (result == false) {\n//                ExtentReportManager.fail(\"The actual text is '\" + getTextElement(by).trim() + \"' not equals '\" + text.trim() + \"'\");\n//            }\n        }\n        if (flowControl.equals(FailureHandling.OPTIONAL)) {\n//            if (ExtentTestManager.getExtentTest() != null) {\n//                ExtentReportManager.warning(\"Verify text of an element [Equals] - \" + result);\n//                ExtentReportManager.warning(\"The actual text is '\" + getTextElement(by).trim() + \"' not equals expected text '\" + text.trim() + \"'\");\n//            }\n            AllureManager.saveTextLog(\"Verify text of an element [Equals] - \" + result + \". The actual text is '\" + getTextElement(by).trim() + \"' not equals '\" + text.trim() + \"'\");\n        }\n\n        addScreenshotToReport(Thread.currentThread().getStackTrace()[1].getMethodName() + \"_\" + DateUtils.getCurrentDateTime());\n\n        return getTextElement(by).trim().equals(text.trim());\n    }\n\n    /**\n     * Verify text of an element. (equals)\n     *\n     * @param by   Represent a web element as the By object\n     * @param text Text of the element to verify.\n     * @return true if the element has the desired text, otherwise false.\n     */\n    @Step(\"Verify text of an element [Equals]\")\n    public static boolean verifyElementTextEquals(By by, String text) {\n        smartWait();\n        waitForElementVisible(by);\n\n        boolean result = getTextElement(by).trim().equals(text.trim());\n\n        if (result == true) {\n            LogUtils.info(\"Verify text of an element [Equals]: \" + result);\n        } else {\n            LogUtils.warn(\"Verify text of an element [Equals]: \" + result);\n        }\n\n        Assert.assertEquals(getTextElement(by).trim(), text.trim(), \"The actual text is '\" + getTextElement(by).trim() + \"' not equals '\" + text.trim() + \"'\");\n\n//        if (ExtentTestManager.getExtentTest() != null) {\n//            ExtentReportManager.warning(\"Verify text of an element [Equals] : \" + result);\n//            ExtentReportManager.warning(\"The actual text is '\" + getTextElement(by).trim() + \"' not equals '\" + text.trim() + \"'\");\n//        }\n        AllureManager.saveTextLog(\"Verify text of an element [Equals] : \" + result + \". The actual text is '\" + getTextElement(by).trim() + \"' not equals '\" + text.trim() + \"'\");\n\n        addScreenshotToReport(Thread.currentThread().getStackTrace()[1].getMethodName() + \"_\" + DateUtils.getCurrentDateTime());\n\n        return result;\n    }\n\n    /**\n     * Verify text of an element. (contains)\n     *\n     * @param by          Represent a web element as the By object\n     * @param text        Text of the element to verify.\n     * @param flowControl Specify failure handling schema (STOP_ON_FAILURE, CONTINUE_ON_FAILURE, OPTIONAL) to determine whether the execution should be allowed to continue or stop\n     * @return true if the element has the desired text, otherwise false.\n     */\n    @Step(\"Verify text of an element [Contains]\")\n    public static boolean verifyElementTextContains(By by, String text, FailureHandling flowControl) {\n        smartWait();\n        waitForElementVisible(by);\n\n        boolean result = getTextElement(by).trim().contains(text.trim());\n\n        if (result == true) {\n            LogUtils.info(\"Verify text of an element [Contains]: \" + result);\n        } else {\n            LogUtils.warn(\"Verify text of an element [Contains]: \" + result);\n        }\n\n        if (flowControl.equals(FailureHandling.STOP_ON_FAILURE)) {\n            Assert.assertTrue(result, \"The actual text is \" + getTextElement(by).trim() + \" not contains \" + text.trim());\n        }\n        if (flowControl.equals(FailureHandling.CONTINUE_ON_FAILURE)) {\n            softAssert.assertTrue(result, \"The actual text is \" + getTextElement(by).trim() + \" not contains \" + text.trim());\n        }\n        if (flowControl.equals(FailureHandling.OPTIONAL)) {\n//            if (ExtentTestManager.getExtentTest() != null) {\n//                ExtentReportManager.warning(\"Verify text of an element [Contains] - \" + result);\n//            }\n            AllureManager.saveTextLog(\"Verify text of an element [Contains] - \" + result);\n        }\n\n        addScreenshotToReport(Thread.currentThread().getStackTrace()[1].getMethodName() + \"_\" + DateUtils.getCurrentDateTime());\n\n        return getTextElement(by).trim().contains(text.trim());\n    }\n\n    /**\n     * Verify text of an element. (contains)\n     *\n     * @param by   Represent a web element as the By object\n     * @param text Text of the element to verify.\n     * @return true if the element has the desired text, otherwise false.\n     */\n    @Step(\"Verify text {1} of element [Contains] {0}\")\n    public static boolean verifyElementTextContains(By by, String text) {\n        smartWait();\n        waitForElementVisible(by);\n\n        boolean result = getTextElement(by).trim().contains(text.trim());\n\n        if (result == true) {\n            LogUtils.info(\"Verify text of an element [Contains]: \" + result);\n        } else {\n            LogUtils.warn(\"Verify text of an element [Contains]: \" + result);\n        }\n\n        Assert.assertTrue(result, \"The actual text is \" + getTextElement(by).trim() + \" not contains \" + text.trim());\n\n//        if (ExtentTestManager.getExtentTest() != null) {\n//            ExtentReportManager.info(\"Verify text of an element [Contains] : \" + result);\n//        }\n        AllureManager.saveTextLog(\"Verify text of an element [Contains] : \" + result);\n\n        addScreenshotToReport(Thread.currentThread().getStackTrace()[1].getMethodName() + \"_\" + DateUtils.getCurrentDateTime());\n\n        return result;\n    }\n\n    /**\n     * Verify if the given element is clickable.\n     *\n     * @param by Represent a web element as the By object\n     * @return true/false\n     */\n    @Step(\"Verify element Clickable {0}\")\n    public static boolean verifyElementClickable(By by) {\n        smartWait();\n\n        try {\n            WebDriverWait wait = new WebDriverWait(DriverManager.getDriver(), Duration.ofSeconds(FrameworkConstants.WAIT_EXPLICIT), Duration.ofMillis(500));\n            wait.until(ExpectedConditions.elementToBeClickable(by));\n            LogUtils.info(\"Verify element clickable \" + by);\n//            if (ExtentTestManager.getExtentTest() != null) {\n//                ExtentReportManager.info(\"Verify element clickable \" + by);\n//            }\n            AllureManager.saveTextLog(\"Verify element clickable \" + by);\n            return true;\n        } catch (Exception e) {\n            LogUtils.error(e.getMessage());\n            Assert.fail(\"FAILED. Element not clickable \" + by);\n            return false;\n        }\n    }\n\n    /**\n     * Verify if the given element is clickable. (in seconds)\n     *\n     * @param by      Represent a web element as the By object\n     * @param timeout System will wait at most timeout (seconds) to return result\n     * @return true/false\n     */\n    @Step(\"Verify element Clickable {0} with timeout {1} second\")\n    public static boolean verifyElementClickable(By by, int timeout) {\n        smartWait();\n\n        try {\n            WebDriverWait wait = new WebDriverWait(DriverManager.getDriver(), Duration.ofSeconds(timeout), Duration.ofMillis(500));\n            wait.until(ExpectedConditions.elementToBeClickable(by));\n            LogUtils.info(\"Verify element clickable \" + by);\n//            if (ExtentTestManager.getExtentTest() != null) {\n//                ExtentReportManager.info(\"Verify element clickable \" + by);\n//            }\n            AllureManager.saveTextLog(\"Verify element clickable \" + by);\n            return true;\n        } catch (Exception e) {\n            LogUtils.error(\"FAILED. Element not clickable \" + by);\n            LogUtils.error(e.getMessage());\n            Assert.fail(\"FAILED. Element not clickable \" + by);\n            return false;\n        }\n    }\n\n    /**\n     * Verify if the given element is clickable. (in seconds)\n     *\n     * @param by      Represent a web element as the By object\n     * @param timeout System will wait at most timeout (seconds) to return result\n     * @param message the custom message if false\n     * @return true/false\n     */\n    @Step(\"Verify element Clickable {0}\")\n    public static boolean verifyElementClickable(By by, int timeout, String message) {\n        smartWait();\n\n        try {\n            WebDriverWait wait = new WebDriverWait(DriverManager.getDriver(), Duration.ofSeconds(timeout), Duration.ofMillis(500));\n            wait.until(ExpectedConditions.elementToBeClickable(by));\n            LogUtils.info(\"Verify element clickable \" + by);\n//            if (ExtentTestManager.getExtentTest() != null) {\n//                ExtentReportManager.info(\"Verify element clickable \" + by);\n//            }\n            AllureManager.saveTextLog(\"Verify element clickable \" + by);\n            return true;\n        } catch (Exception e) {\n            LogUtils.error(message);\n            LogUtils.error(e.getMessage());\n            Assert.fail(message + \"\" + e.getMessage());\n            return false;\n        }\n    }\n\n    /**\n     * Verify if the given web element does present on DOM.\n     *\n     * @param by Represent a web element as the By object\n     * @return true/false\n     */\n    @Step(\"Verify element present {0}\")\n    public static boolean verifyElementPresent(By by) {\n        smartWait();\n\n        try {\n            WebDriverWait wait = new WebDriverWait(DriverManager.getDriver(), Duration.ofSeconds(FrameworkConstants.WAIT_EXPLICIT), Duration.ofMillis(500));\n            wait.until(ExpectedConditions.presenceOfElementLocated(by));\n            LogUtils.info(\"Verify element present \" + by);\n//            if (ExtentTestManager.getExtentTest() != null) {\n//                ExtentReportManager.info(\"Verify element present \" + by);\n//            }\n            AllureManager.saveTextLog(\"Verify element present \" + by);\n            addScreenshotToReport(Thread.currentThread().getStackTrace()[1].getMethodName() + \"_\" + DateUtils.getCurrentDateTime());\n            return true;\n        } catch (Exception e) {\n            LogUtils.info(\"The element does NOT present. \" + e.getMessage());\n            Assert.fail(\"The element does NOT present. \" + e.getMessage());\n            return false;\n        }\n    }\n\n    /**\n     * Verify if the given web element does present on DOM. (in seconds)\n     *\n     * @param by      Represent a web element as the By object\n     * @param timeout System will wait at most timeout (seconds) to return result\n     * @return true/false\n     */\n    @Step(\"Verify element present {0} with timeout {1} second\")\n    public static boolean verifyElementPresent(By by, int timeout) {\n        smartWait();\n\n        try {\n            WebDriverWait wait = new WebDriverWait(DriverManager.getDriver(), Duration.ofSeconds(timeout));\n            wait.until(ExpectedConditions.presenceOfElementLocated(by));\n            LogUtils.info(\"Verify element present \" + by);\n//            if (ExtentTestManager.getExtentTest() != null) {\n//                ExtentReportManager.info(\"Verify element present \" + by);\n//            }\n            AllureManager.saveTextLog(\"Verify element present \" + by);\n            addScreenshotToReport(Thread.currentThread().getStackTrace()[1].getMethodName() + \"_\" + DateUtils.getCurrentDateTime());\n            return true;\n        } catch (Exception e) {\n            LogUtils.info(\"The element does NOT present. \" + e.getMessage());\n            Assert.fail(\"The element does NOT present. \" + e.getMessage());\n            return false;\n        }\n    }\n\n    /**\n     * Verify if the given web element does present on DOM.\n     *\n     * @param by      Represent a web element as the By object\n     * @param message the custom message if false\n     * @return true/false\n     */\n    @Step(\"Verify element present {0}\")\n    public static boolean verifyElementPresent(By by, String message) {\n        smartWait();\n\n        try {\n            WebDriverWait wait = new WebDriverWait(DriverManager.getDriver(), Duration.ofSeconds(FrameworkConstants.WAIT_EXPLICIT), Duration.ofMillis(500));\n            wait.until(ExpectedConditions.presenceOfElementLocated(by));\n            LogUtils.info(\"Verify element present \" + by);\n//            if (ExtentTestManager.getExtentTest() != null) {\n//                ExtentReportManager.info(\"Verify element present \" + by);\n//            }\n            AllureManager.saveTextLog(\"Verify element present \" + by);\n            addScreenshotToReport(Thread.currentThread().getStackTrace()[1].getMethodName() + \"_\" + DateUtils.getCurrentDateTime());\n            return true;\n        } catch (Exception e) {\n            if (message.isEmpty() || message == null) {\n                LogUtils.error(\"The element does NOT present. \" + e.getMessage());\n                Assert.fail(\"The element does NOT present. \" + e.getMessage());\n            } else {\n                LogUtils.error(message);\n                Assert.fail(message);\n            }\n\n            return false;\n        }\n    }\n\n    /**\n     * Verify if the given web element does present on DOM. (in seconds)\n     *\n     * @param by      Represent a web element as the By object\n     * @param timeout System will wait at most timeout (seconds) to return result\n     * @param message the custom message if false\n     * @return true/false\n     */\n    @Step(\"Verify element present {0} with timeout {1} second\")\n    public static boolean verifyElementPresent(By by, int timeout, String message) {\n        smartWait();\n\n        try {\n            WebDriverWait wait = new WebDriverWait(DriverManager.getDriver(), Duration.ofSeconds(timeout));\n            wait.until(ExpectedConditions.presenceOfElementLocated(by));\n            LogUtils.info(\"Verify element present \" + by);\n//            if (ExtentTestManager.getExtentTest() != null) {\n//                ExtentReportManager.info(\"Verify element present \" + by);\n//            }\n            AllureManager.saveTextLog(\"Verify element present \" + by);\n            addScreenshotToReport(Thread.currentThread().getStackTrace()[1].getMethodName() + \"_\" + DateUtils.getCurrentDateTime());\n            return true;\n        } catch (Exception e) {\n            if (message.isEmpty() || message == null) {\n                LogUtils.error(\"The element does NOT present. \" + e.getMessage());\n                Assert.fail(\"The element does NOT present. \" + e.getMessage());\n            } else {\n                LogUtils.error(message);\n                Assert.fail(message);\n            }\n\n            return false;\n        }\n    }\n\n    /**\n     * Verify if the given web element does NOT present on the DOM.\n     *\n     * @param by Represent a web element as the By object\n     * @return true/false\n     */\n    @Step(\"Verify element NOT present {0}\")\n    public static boolean verifyElementNotPresent(By by) {\n        smartWait();\n\n        try {\n            WebDriverWait wait = new WebDriverWait(DriverManager.getDriver(), Duration.ofSeconds(FrameworkConstants.WAIT_EXPLICIT), Duration.ofMillis(500));\n            wait.until(ExpectedConditions.presenceOfElementLocated(by));\n            LogUtils.error(\"The element presents. \" + by);\n            Assert.fail(\"The element presents. \" + by);\n            return false;\n        } catch (Exception e) {\n            return true;\n        }\n    }\n\n    /**\n     * Verify if the given web element does NOT present on the DOM. (in seconds)\n     *\n     * @param by      Represent a web element as the By object\n     * @param timeout System will wait at most timeout (seconds) to return result\n     * @return true/false\n     */\n    @Step(\"Verify element NOT present {0} with timeout {1} second\")\n    public static boolean verifyElementNotPresent(By by, int timeout) {\n        smartWait();\n\n        try {\n            WebDriverWait wait = new WebDriverWait(DriverManager.getDriver(), Duration.ofSeconds(timeout));\n            wait.until(ExpectedConditions.presenceOfElementLocated(by));\n            LogUtils.error(\"Element is present \" + by);\n            Assert.fail(\"The element presents. \" + by);\n            return false;\n        } catch (Exception e) {\n            return true;\n        }\n    }\n\n    /**\n     * Verify if the given web element does NOT present on the DOM.\n     *\n     * @param by      Represent a web element as the By object\n     * @param message the custom message if false\n     * @return true/false\n     */\n    @Step(\"Verify element NOT present {0}\")\n    public static boolean verifyElementNotPresent(By by, String message) {\n        smartWait();\n\n        try {\n            WebDriverWait wait = new WebDriverWait(DriverManager.getDriver(), Duration.ofSeconds(FrameworkConstants.WAIT_EXPLICIT), Duration.ofMillis(500));\n            wait.until(ExpectedConditions.presenceOfElementLocated(by));\n            if (message.isEmpty() || message == null) {\n                LogUtils.error(\"The element presents. \" + by);\n                Assert.fail(\"The element presents. \" + by);\n            } else {\n                LogUtils.error(message);\n                Assert.fail(message + \" \" + by);\n            }\n            return false;\n        } catch (Exception e) {\n            return true;\n        }\n    }\n\n    /**\n     * Verify if the given web element does NOT present on the DOM. (in seconds)\n     *\n     * @param by      Represent a web element as the By object\n     * @param timeout System will wait at most timeout (seconds) to return result\n     * @param message the custom message if false\n     * @return true/false\n     */\n    @Step(\"Verify element NOT present {0} with timeout {1} second\")\n    public static boolean verifyElementNotPresent(By by, int timeout, String message) {\n        smartWait();\n\n        try {\n            WebDriverWait wait = new WebDriverWait(DriverManager.getDriver(), Duration.ofSeconds(timeout));\n            wait.until(ExpectedConditions.presenceOfElementLocated(by));\n            if (message.isEmpty() || message == null) {\n                LogUtils.error(\"The element presents. \" + by);\n                Assert.fail(\"The element presents. \" + by);\n            } else {\n                LogUtils.error(message + by);\n                Assert.fail(message + by);\n            }\n            return false;\n        } catch (Exception e) {\n            return true;\n        }\n    }\n\n    /**\n     * Verify element is visible. (in seconds)\n     *\n     * @param by      Represent a web element as the By object\n     * @param timeout System will wait at most timeout (seconds) to return result\n     * @return true/false\n     */\n    @Step(\"Verify element visible {0}\")\n    public static boolean isElementVisible(By by, int timeout) {\n        smartWait();\n\n        try {\n            WebDriverWait wait = new WebDriverWait(DriverManager.getDriver(), Duration.ofSeconds(timeout));\n            wait.until(ExpectedConditions.visibilityOfElementLocated(by));\n            LogUtils.info(\"Verify element visible \" + by);\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n    /**\n     * Verify if the given web element is visible.\n     *\n     * @param by Represent a web element as the By object\n     * @return true/false\n     */\n    @Step(\"Verify element visible {0}\")\n    public static boolean verifyElementVisible(By by) {\n        smartWait();\n\n        try {\n            WebDriverWait wait = new WebDriverWait(DriverManager.getDriver(), Duration.ofSeconds(FrameworkConstants.WAIT_EXPLICIT), Duration.ofMillis(500));\n            wait.until(ExpectedConditions.visibilityOfElementLocated(by));\n            LogUtils.info(\"Verify element visible \" + by);\n            return true;\n        } catch (Exception e) {\n            Assert.fail(\"The element is NOT visible. \" + by);\n            return false;\n        }\n    }\n\n    /**\n     * Verify if the given web element is visible. (in seconds)\n     *\n     * @param by      Represent a web element as the By object\n     * @param timeout System will wait at most timeout (seconds) to return result\n     * @return true/false\n     */\n    @Step(\"Verify element visible {0} with timeout {1} second\")\n    public static boolean verifyElementVisible(By by, int timeout) {\n        smartWait();\n\n        try {\n            WebDriverWait wait = new WebDriverWait(DriverManager.getDriver(), Duration.ofSeconds(timeout));\n            wait.until(ExpectedConditions.visibilityOfElementLocated(by));\n            LogUtils.info(\"Verify element visible \" + by);\n            return true;\n        } catch (Exception e) {\n            LogUtils.error(\"The element is not visible. \" + e.getMessage());\n            Assert.fail(\"The element is NOT visible. \" + by);\n            return false;\n        }\n    }\n\n    /**\n     * Verify if the given web element is visible.\n     *\n     * @param by      Represent a web element as the By object\n     * @param message the custom message if false\n     * @return true/false\n     */\n    @Step(\"Verify element visible {0}\")\n    public static boolean verifyElementVisible(By by, String message) {\n        smartWait();\n\n        try {\n            WebDriverWait wait = new WebDriverWait(DriverManager.getDriver(), Duration.ofSeconds(FrameworkConstants.WAIT_EXPLICIT), Duration.ofMillis(500));\n            wait.until(ExpectedConditions.visibilityOfElementLocated(by));\n            LogUtils.info(\"Verify element visible \" + by);\n            return true;\n        } catch (Exception e) {\n            if (message.isEmpty() || message == null) {\n                LogUtils.error(\"The element is not visible. \" + by);\n                Assert.fail(\"The element is NOT visible. \" + by);\n            } else {\n                LogUtils.error(message + by);\n                Assert.fail(message + by);\n            }\n            return false;\n        }\n    }\n\n    /**\n     * Verify if the given web element is visible. (in seconds)\n     *\n     * @param by      Represent a web element as the By object\n     * @param timeout System will wait at most timeout (seconds) to return result\n     * @param message the custom message if false\n     * @return true/false\n     */\n    @Step(\"Verify element visible {0} with timeout {1} second\")\n    public static boolean verifyElementVisible(By by, int timeout, String message) {\n        smartWait();\n\n        try {\n            WebDriverWait wait = new WebDriverWait(DriverManager.getDriver(), Duration.ofSeconds(timeout));\n            wait.until(ExpectedConditions.visibilityOfElementLocated(by));\n            LogUtils.info(\"Verify element visible \" + by);\n            return true;\n        } catch (Exception e) {\n            if (message.isEmpty() || message == null) {\n                LogUtils.error(\"The element is not visible. \" + by);\n                Assert.fail(\"The element is NOT visible. \" + by);\n            } else {\n                LogUtils.error(message + by);\n                Assert.fail(message + by);\n            }\n            return false;\n        }\n    }\n\n\n    /**\n     * Verify if the given web element is NOT visible.\n     *\n     * @param by Represent a web element as the By object\n     * @return true/false\n     */\n    @Step(\"Verify element NOT visible {0}\")\n    public static boolean verifyElementNotVisible(By by) {\n        smartWait();\n\n        try {\n            WebDriverWait wait = new WebDriverWait(DriverManager.getDriver(), Duration.ofSeconds(FrameworkConstants.WAIT_EXPLICIT), Duration.ofMillis(500));\n            wait.until(ExpectedConditions.invisibilityOfElementLocated(by));\n            return true;\n        } catch (Exception e) {\n            LogUtils.error(\"FAILED. The element is visible \" + by);\n            Assert.fail(\"FAILED. The element is visible \" + by);\n            return false;\n        }\n    }\n\n    /**\n     * Verify if the given web element is NOT visible. (in seconds)\n     *\n     * @param by      Represent a web element as the By object\n     * @param timeout System will wait at most timeout (seconds) to return result\n     * @return true/false\n     */\n    @Step(\"Verify element NOT visible {0} with timeout {1} second\")\n    public static boolean verifyElementNotVisible(By by, int timeout) {\n        smartWait();\n\n        try {\n            WebDriverWait wait = new WebDriverWait(DriverManager.getDriver(), Duration.ofSeconds(timeout));\n            wait.until(ExpectedConditions.invisibilityOfElementLocated(by));\n            return true;\n        } catch (Exception e) {\n            LogUtils.error(\"FAILED. The element is visible \" + by);\n            Assert.fail(\"FAILED. The element is visible \" + by);\n            return false;\n        }\n    }\n\n    /**\n     * Verify if the given web element is NOT visible.\n     *\n     * @param by      Represent a web element as the By object\n     * @param message the custom message if false\n     * @return true/false\n     */\n    @Step(\"Verify element NOT visible {0}\")\n    public static boolean verifyElementNotVisible(By by, String message) {\n        smartWait();\n\n        try {\n            WebDriverWait wait = new WebDriverWait(DriverManager.getDriver(), Duration.ofSeconds(FrameworkConstants.WAIT_EXPLICIT), Duration.ofMillis(500));\n            wait.until(ExpectedConditions.invisibilityOfElementLocated(by));\n            return true;\n        } catch (Exception e) {\n            if (message.isEmpty() || message == null) {\n                LogUtils.error(\"FAILED. The element is visible \" + by);\n                Assert.fail(\"FAILED. The element is visible \" + by);\n            } else {\n                LogUtils.error(message + \" \" + by);\n                Assert.fail(message + \" \" + by);\n            }\n            return false;\n        }\n    }\n\n    /**\n     * Verify if the given web element is NOT visible. (in seconds)\n     *\n     * @param by      Represent a web element as the By object\n     * @param timeout System will wait at most timeout (seconds) to return result\n     * @param message the custom message if false\n     * @return true/false\n     */\n    @Step(\"Verify element NOT visible {0} with timeout {1} second\")\n    public static boolean verifyElementNotVisible(By by, int timeout, String message) {\n        smartWait();\n\n        try {\n            WebDriverWait wait = new WebDriverWait(DriverManager.getDriver(), Duration.ofSeconds(timeout));\n            wait.until(ExpectedConditions.invisibilityOfElementLocated(by));\n            return true;\n        } catch (Exception e) {\n            if (message.isEmpty() || message == null) {\n                LogUtils.error(\"FAILED. The element is visible \" + by);\n                Assert.fail(\"FAILED. The element is visible \" + by);\n            } else {\n                LogUtils.error(message + \" \" + by);\n                Assert.fail(message + \" \" + by);\n            }\n            return false;\n        }\n    }\n\n\n    /**\n     * Scroll an element into the visible area of the browser window. (at TOP)\n     *\n     * @param by Represent a web element as the By object\n     */\n    @Step(\"Scroll to element {0}\")\n    public static void scrollToElementAtTop(By by) {\n        smartWait();\n\n        JavascriptExecutor js = (JavascriptExecutor) DriverManager.getDriver();\n        js.executeScript(\"arguments[0].scrollIntoView(true);\", getWebElement(by));\n        LogUtils.info(\"Scroll to element \" + by);\n    }\n\n    /**\n     * Scroll an element into the visible area of the browser window. (at BOTTOM)\n     *\n     * @param by Represent a web element as the By object\n     */\n    @Step(\"Scroll to element {0}\")\n    public static void scrollToElementAtBottom(By by) {\n        smartWait();\n\n        JavascriptExecutor js = (JavascriptExecutor) DriverManager.getDriver();\n        js.executeScript(\"arguments[0].scrollIntoView(false);\", getWebElement(by));\n        LogUtils.info(\"Scroll to element \" + by);\n    }\n\n    /**\n     * Scroll an element into the visible area of the browser window. (at TOP)\n     *\n     * @param webElement Represent a web element as the By object\n     */\n    @Step(\"Scroll to element {0}\")\n    public static void scrollToElementAtTop(WebElement webElement) {\n        smartWait();\n\n        JavascriptExecutor js = (JavascriptExecutor) DriverManager.getDriver();\n        js.executeScript(\"arguments[0].scrollIntoView(true);\", webElement);\n        LogUtils.info(\"Scroll to element \" + webElement);\n    }\n\n    /**\n     * Scroll an element into the visible area of the browser window. (at BOTTOM)\n     *\n     * @param webElement Represent a web element as the By object\n     */\n    @Step(\"Scroll to element {0}\")\n    public static void scrollToElementAtBottom(WebElement webElement) {\n        smartWait();\n\n        JavascriptExecutor js = (JavascriptExecutor) DriverManager.getDriver();\n        js.executeScript(\"arguments[0].scrollIntoView(false);\", webElement);\n        LogUtils.info(\"Scroll to element \" + webElement);\n    }\n\n    /**\n     * Scroll to an offset location\n     *\n     * @param X x offset\n     * @param Y y offset\n     */\n    @Step(\"Scroll to position X={0}, Y={1}\")\n    public static void scrollToPosition(int X, int Y) {\n        smartWait();\n\n        JavascriptExecutor js = (JavascriptExecutor) DriverManager.getDriver();\n        js.executeScript(\"window.scrollTo(\" + X + \",\" + Y + \");\");\n        LogUtils.info(\"Scroll to position X = \" + X + \" ; Y = \" + Y);\n    }\n\n    /**\n     * Simulate users hovering a mouse over the given element.\n     *\n     * @param by Represent a web element as the By object\n     * @return true/false\n     */\n    @Step(\"Hover on element {0}\")\n    public static boolean hoverOnElement(By by) {\n        smartWait();\n\n        try {\n            Actions action = new Actions(DriverManager.getDriver());\n            action.moveToElement(getWebElement(by)).perform();\n            LogUtils.info(\"Hover on element \" + by);\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n    /**\n     * Simulate users hovering a mouse over the given element.\n     *\n     * @param by Represent a web element as the By object\n     * @return true/false\n     */\n    @Step(\"Mouse hover on element {0}\")\n    public static boolean mouseHover(By by) {\n        smartWait();\n\n        try {\n            Actions action = new Actions(DriverManager.getDriver());\n            action.moveToElement(getWebElement(by)).perform();\n            LogUtils.info(\"Mouse hover on element \" + by);\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n    /**\n     * Drag and drop an element onto another element.\n     *\n     * @param fromElement represent the drag-able element\n     * @param toElement   represent the drop-able element\n     * @return true/false\n     */\n    @Step(\"Drag from element {0} to element {1}\")\n    public static boolean dragAndDrop(By fromElement, By toElement) {\n        smartWait();\n\n        try {\n            Actions action = new Actions(DriverManager.getDriver());\n            action.dragAndDrop(getWebElement(fromElement), getWebElement(toElement)).perform();\n            //action.clickAndHold(getWebElement(fromElement)).moveToElement(getWebElement(toElement)).release(getWebElement(toElement)).build().perform();\n            return true;\n        } catch (Exception e) {\n            LogUtils.info(e.getMessage());\n            return false;\n        }\n    }\n\n    /**\n     * Drag and drop an element onto another element. (HTML5)\n     *\n     * @param fromElement represent the drag-able element\n     * @param toElement   represent the drop-able element\n     * @return true/false\n     */\n    @Step(\"Drag HTML5 from element {0} to element {1}\")\n    public static boolean dragAndDropHTML5(By fromElement, By toElement) {\n        smartWait();\n\n        try {\n            Robot robot = new Robot();\n            robot.mouseMove(0, 0);\n\n            int X1 = getWebElement(fromElement).getLocation().getX() + (getWebElement(fromElement).getSize().getWidth() / 2);\n            int Y1 = getWebElement(fromElement).getLocation().getY() + (getWebElement(fromElement).getSize().getHeight() / 2);\n            System.out.println(X1 + \" , \" + Y1);\n\n            int X2 = getWebElement(toElement).getLocation().getX() + (getWebElement(toElement).getSize().getWidth() / 2);\n            int Y2 = getWebElement(toElement).getLocation().getY() + (getWebElement(toElement).getSize().getHeight() / 2);\n            System.out.println(X2 + \" , \" + Y2);\n\n            //This place takes the current coordinates plus 120px which is the browser header (1920x1080 current window)\n            //Header: chrome is being controlled by automated test software\n            sleep(1);\n            robot.mouseMove(X1, Y1 + 120);\n            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n\n            sleep(1);\n            robot.mouseMove(X2, Y2 + 120);\n            sleep(1);\n            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n\n            return true;\n        } catch (Exception e) {\n            LogUtils.info(e.getMessage());\n            return false;\n        }\n    }\n\n    /**\n     * Drag an object and drop it to an offset location.\n     *\n     * @param fromElement represent the drag-able element\n     * @param X           x offset\n     * @param Y           y offset\n     * @return true/false\n     */\n    @Step(\"Drag from element {0} to X={1}, Y={2}\")\n    public static boolean dragAndDropToOffset(By fromElement, int X, int Y) {\n        smartWait();\n\n        try {\n            Robot robot = new Robot();\n            robot.mouseMove(0, 0);\n            int X1 = getWebElement(fromElement).getLocation().getX() + (getWebElement(fromElement).getSize().getWidth() / 2);\n            int Y1 = getWebElement(fromElement).getLocation().getY() + (getWebElement(fromElement).getSize().getHeight() / 2);\n            System.out.println(X1 + \" , \" + Y1);\n            sleep(1);\n\n            //This place takes the current coordinates plus 120px which is the browser header (1920x1080 current window)\n            //Header: chrome is being controlled by automated test software\n            robot.mouseMove(X1, Y1 + 120);\n            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n\n            sleep(1);\n            robot.mouseMove(X, Y + 120);\n            sleep(1);\n            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n            return true;\n        } catch (Exception e) {\n            LogUtils.info(e.getMessage());\n            return false;\n        }\n    }\n\n    /**\n     * Move to the given element.\n     *\n     * @param toElement Represent a web element as the By object\n     * @return true/false\n     */\n    @Step(\"Move to element {0}\")\n    public static boolean moveToElement(By toElement) {\n        smartWait();\n\n        try {\n            Actions action = new Actions(DriverManager.getDriver());\n            action.moveToElement(getWebElement(toElement)).release(getWebElement(toElement)).build().perform();\n            return true;\n        } catch (Exception e) {\n            LogUtils.info(e.getMessage());\n            return false;\n        }\n    }\n\n    /**\n     * Move to an offset location.\n     *\n     * @param X x offset\n     * @param Y y offset\n     * @return true/false\n     */\n    @Step(\"Move to offset X={0}, Y={1}\")\n    public static boolean moveToOffset(int X, int Y) {\n        smartWait();\n\n        try {\n            Actions action = new Actions(DriverManager.getDriver());\n            action.moveByOffset(X, Y).build().perform();\n            return true;\n        } catch (Exception e) {\n            LogUtils.info(e.getMessage());\n            return false;\n        }\n    }\n\n    /**\n     * Reload the current web page.\n     */\n    @Step(\"Reload page\")\n    public static void reloadPage() {\n        smartWait();\n\n        DriverManager.getDriver().navigate().refresh();\n        waitForPageLoaded();\n        LogUtils.info(\"Reloaded page \" + DriverManager.getDriver().getCurrentUrl());\n    }\n\n\n    /**\n     * Fills the border color of the specified element.\n     *\n     * @param by passes the element object in the form By\n     * @return Colors red borders for Elements on the website\n     */\n    @Step(\"Highlight on element\")\n    public static WebElement highLightElement(By by) {\n        smartWait();\n\n        // draw a border around the found element\n        if (DriverManager.getDriver() instanceof JavascriptExecutor) {\n            ((JavascriptExecutor) DriverManager.getDriver()).executeScript(\"arguments[0].style.border='3px solid red'\", waitForElementVisible(by));\n            sleep(1);\n            LogUtils.info(\"Highlight on element \" + by);\n        }\n        return getWebElement(by);\n    }\n\n    /**\n     * Navigate to the specified URL.\n     *\n     * @param URL the specified url\n     */\n    @Step(\"Open website with URL {0}\")\n    public static void openWebsite(String URL) {\n        sleep(FrameworkConstants.WAIT_SLEEP_STEP);\n\n        DriverManager.getDriver().get(URL);\n        waitForPageLoaded();\n\n        LogUtils.info(\"Open website with URL: \" + URL);\n\n//        if (ExtentTestManager.getExtentTest() != null) {\n//            ExtentReportManager.pass(\"Open website with URL: \" + URL);\n//        }\n        AllureManager.saveTextLog(\"Open website with URL: \" + URL);\n\n        addScreenshotToReport(Thread.currentThread().getStackTrace()[1].getMethodName() + \"_\" + DateUtils.getCurrentDateTime());\n\n    }\n\n    /**\n     * Navigate to the specified web page.\n     *\n     * @param URL the specified url\n     */\n    @Step(\"Navigate to URL {0}\")\n    public static void navigateToUrl(String URL) {\n        DriverManager.getDriver().navigate().to(URL);\n        waitForPageLoaded();\n\n        LogUtils.info(\"Navigate to URL: \" + URL);\n\n//        if (ExtentTestManager.getExtentTest() != null) {\n//            ExtentReportManager.pass(\"Navigate to URL: \" + URL);\n//        }\n        AllureManager.saveTextLog(\"Navigate to URL: \" + URL);\n\n        addScreenshotToReport(Thread.currentThread().getStackTrace()[1].getMethodName() + \"_\" + DateUtils.getCurrentDateTime());\n\n    }\n\n    /**\n     * Set the value of an input field\n     *\n     * @param by    an element of object type By\n     * @param value the value to fill in the text box\n     */\n    @Step(\"Set text on text box\")\n    public static void setText(By by, String value) {\n        waitForElementVisible(by).sendKeys(value);\n        LogUtils.info(\"Set text \" + value + \" on \" + by.toString());\n\n//        if (ExtentTestManager.getExtentTest() != null) {\n//            ExtentReportManager.pass(\"Set text \" + value + \" on \" + by.toString());\n//        }\n        AllureManager.saveTextLog(\"Set text \" + value + \" on \" + by.toString());\n\n        addScreenshotToReport(Thread.currentThread().getStackTrace()[1].getMethodName() + \"_\" + DateUtils.getCurrentDateTime());\n\n    }\n\n    /**\n     * Set the value of an input field and press the key on the keyboard\n     *\n     * @param by    an element of object type By\n     * @param value the value to fill in the text box\n     * @param keys  key on the keyboard to press\n     */\n    @Step(\"Set text on text box and press key\")\n    public static void setText(By by, String value, Keys keys) {\n        waitForElementVisible(by).sendKeys(value, keys);\n        LogUtils.info(\"Set text \" + value + \" on \" + by + \" and press key \" + keys.name());\n\n//        if (ExtentTestManager.getExtentTest() != null) {\n//            ExtentReportManager.pass(\"Set text \" + value + \" on \" + by + \" and press key \" + keys.name());\n//        }\n        AllureManager.saveTextLog(\"Set text \" + value + \" on \" + by + \" and press key \" + keys.name());\n\n        addScreenshotToReport(Thread.currentThread().getStackTrace()[1].getMethodName() + \"_\" + DateUtils.getCurrentDateTime());\n\n    }\n\n    /**\n     * Simulates keystroke events on the specified element, as though you typed the value key-by-key.\n     *\n     * @param by   an element of object type By\n     * @param keys key on the keyboard to press\n     */\n    @Step(\"Set text on text box and press key\")\n    public static void sendKeys(By by, Keys keys) {\n        waitForElementVisible(by).sendKeys(keys);\n        LogUtils.info(\"Press key \" + keys.name() + \" on element \" + by);\n\n//        if (ExtentTestManager.getExtentTest() != null) {\n//            ExtentReportManager.pass(\"Press key \" + keys.name() + \" on element \" + by);\n//        }\n        AllureManager.saveTextLog(\"Press key \" + keys.name() + \" on element \" + by);\n\n        addScreenshotToReport(Thread.currentThread().getStackTrace()[1].getMethodName() + \"_\" + DateUtils.getCurrentDateTime());\n    }\n\n    /**\n     * Simulates keystroke events at the current position, as though you typed the value key-by-key.\n     *\n     * @param keys key on the keyboard to press\n     */\n    @Step(\"Set text on text box and press key\")\n    public static void sendKeys(Keys keys) {\n        Actions actions = new Actions(DriverManager.getDriver());\n        actions.sendKeys(keys);\n        LogUtils.info(\"Press key \" + keys.name() + \" on keyboard\");\n\n//        if (ExtentTestManager.getExtentTest() != null) {\n//            ExtentReportManager.pass(\"Press key \" + keys.name() + \" on keyboard\");\n//        }\n        AllureManager.saveTextLog(\"Press key \" + keys.name() + \" on keyboard\");\n\n        addScreenshotToReport(Thread.currentThread().getStackTrace()[1].getMethodName() + \"_\" + DateUtils.getCurrentDateTime());\n    }\n\n    /**\n     * Clear all text of the element.\n     *\n     * @param by an element of object type By\n     */\n    @Step(\"Clear value in text box\")\n    public static void clearText(By by) {\n        waitForElementVisible(by).clear();\n        LogUtils.info(\"Clear text in textbox \" + by.toString());\n\n//        if (ExtentTestManager.getExtentTest() != null) {\n//            ExtentReportManager.pass(\"Clear text in textbox \" + by.toString());\n//        }\n        AllureManager.saveTextLog(\"Clear text in textbox\");\n        addScreenshotToReport(Thread.currentThread().getStackTrace()[1].getMethodName() + \"_\" + DateUtils.getCurrentDateTime());\n\n    }\n\n    /**\n     * Clear all text of the element with press Ctrl A > Delete\n     *\n     * @param by an element of object type By\n     */\n    @Step(\"Clear text in text box with Ctrl A\")\n    public static void clearTextCtrlA(By by) {\n        waitForElementVisible(by);\n        Actions actions = new Actions(DriverManager.getDriver());\n        actions.click(getWebElement(by)).build().perform();\n        //actions.moveToElement(getWebElement(by)).click().build();\n        actions.keyDown(Keys.CONTROL).sendKeys(\"a\").keyUp(Keys.CONTROL).build().perform();\n        actions.sendKeys(Keys.DELETE).build().perform();\n\n        LogUtils.info(\"Clear text in textbox \" + by.toString());\n//        if (ExtentTestManager.getExtentTest() != null) {\n//            ExtentReportManager.pass(\"Clear text in textbox \" + by.toString());\n//        }\n        AllureManager.saveTextLog(\"Clear text in textbox\");\n        addScreenshotToReport(Thread.currentThread().getStackTrace()[1].getMethodName() + \"_\" + DateUtils.getCurrentDateTime());\n\n    }\n\n    /**\n     * Clear all text of the element then set the text on that element.\n     *\n     * @param by    an element of object type By\n     * @param value the value to fill in the text box\n     */\n    @Step(\"Clear and Fill text on text box\")\n    public static void clearAndFillText(By by, String value) {\n        waitForElementVisible(by).clear();\n        waitForElementVisible(by).sendKeys(value);\n        LogUtils.info(\"Clear and Fill \" + value + \" on \" + by.toString());\n\n//        if (ExtentTestManager.getExtentTest() != null) {\n//            ExtentReportManager.pass(\"Clear and Fill \" + value + \" on \" + by.toString());\n//        }\n        AllureManager.saveTextLog(\"Clear and Fill \" + value + \" on \" + by.toString());\n\n        addScreenshotToReport(Thread.currentThread().getStackTrace()[1].getMethodName() + \"_\" + DateUtils.getCurrentDateTime());\n\n    }\n\n    /**\n     * Click on the specified element.\n     *\n     * @param by an element of object type By\n     */\n    @Step(\"Click on the element {0}\")\n    public static void clickElement(By by) {\n        waitForElementVisible(by).click();\n        LogUtils.info(\"Clicked on the element \" + by.toString());\n\n//        if (ExtentTestManager.getExtentTest() != null) {\n//            ExtentReportManager.pass(\"Clicked on the element \" + by.toString());\n//        }\n        AllureManager.saveTextLog(\"Clicked on the element \" + by.toString());\n\n        addScreenshotToReport(Thread.currentThread().getStackTrace()[1].getMethodName() + \"_\" + DateUtils.getCurrentDateTime());\n\n    }\n\n    /**\n     * Click on element with timeout\n     *\n     * @param by an element of object type By\n     */\n    @Step(\"Click on the element {0} with timeout {1}s\")\n    public static void clickElement(By by, int timeout) {\n        waitForElementVisible(by, timeout).click();\n        LogUtils.info(\"Clicked on the element \" + by.toString());\n\n//        if (ExtentTestManager.getExtentTest() != null) {\n//            ExtentReportManager.pass(\"Clicked on the element \" + by.toString());\n//        }\n        AllureManager.saveTextLog(\"Clicked on the element \" + by.toString());\n\n        addScreenshotToReport(Thread.currentThread().getStackTrace()[1].getMethodName() + \"_\" + DateUtils.getCurrentDateTime());\n\n    }\n\n    /**\n     * Click on Elements on the web with Javascript (click implicitly without fear of being hidden)\n     *\n     * @param by an element of object type By\n     */\n    @Step(\"Click on the element by Javascript {0}\")\n    public static void clickElementWithJs(By by) {\n        waitForElementPresent(by);\n        //Scroll to element với Javascript Executor\n        JavascriptExecutor js = (JavascriptExecutor) DriverManager.getDriver();\n        js.executeScript(\"arguments[0].scrollIntoView(false);\", getWebElement(by));\n        //Click with JS\n        js.executeScript(\"arguments[0].click();\", getWebElement(by));\n\n        LogUtils.info(\"Click on element with JS: \" + by);\n//        if (ExtentTestManager.getExtentTest() != null) {\n//            ExtentReportManager.pass(\"Click on element with JS: \" + by);\n//        }\n        AllureManager.saveTextLog(\"Click on element with JS: \" + by);\n        addScreenshotToReport(Thread.currentThread().getStackTrace()[1].getMethodName() + \"_\" + DateUtils.getCurrentDateTime());\n\n    }\n\n    /**\n     * Click on the link on website with text\n     *\n     * @param linkText is the visible text of a link\n     */\n    @Step(\"Click on the link text {0}\")\n    public static void clickLinkText(String linkText) {\n        smartWait();\n\n        WebDriverWait wait = new WebDriverWait(DriverManager.getDriver(), Duration.ofSeconds(FrameworkConstants.WAIT_EXPLICIT), Duration.ofMillis(500));\n        WebElement elementWaited = wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(linkText)));\n        elementWaited.click();\n\n        LogUtils.info(\"Click on link text \" + linkText);\n//        if (ExtentTestManager.getExtentTest() != null) {\n//            ExtentReportManager.pass(\"Click on link text \" + linkText);\n//        }\n        AllureManager.saveTextLog(\"Click on link text \" + linkText);\n        addScreenshotToReport(Thread.currentThread().getStackTrace()[1].getMethodName() + \"_\" + DateUtils.getCurrentDateTime());\n    }\n\n    /**\n     * Right-click on the Element object on the web\n     *\n     * @param by an element of object type By\n     */\n    @Step(\"Right click on element {0}\")\n    public static void rightClickElement(By by) {\n        Actions action = new Actions(DriverManager.getDriver());\n        action.contextClick(waitForElementVisible(by)).build().perform();\n        LogUtils.info(\"Right click on element \" + by);\n//        if (ExtentTestManager.getExtentTest() != null) {\n//            ExtentReportManager.pass(\"Right click on element \" + by);\n//        }\n        AllureManager.saveTextLog(\"Right click on element \" + by);\n        addScreenshotToReport(Thread.currentThread().getStackTrace()[1].getMethodName() + \"_\" + DateUtils.getCurrentDateTime());\n\n    }\n\n    /**\n     * Get text of an element\n     *\n     * @param by an element of object type By\n     * @return text of a element\n     */\n    @Step(\"Get text of element {0}\")\n    public static String getTextElement(By by) {\n        smartWait();\n        AllureManager.saveTextLog(\"Get text of element \" + by.toString());\n        AllureManager.saveTextLog(\"==> The Text is: \" + waitForElementVisible(by).getText());\n        return waitForElementVisible(by).getText().trim();\n    }\n\n    /**\n     * Get the value from the element's attribute\n     *\n     * @param by            an element of object type By\n     * @param attributeName attribute name\n     * @return element's attribute value\n     */\n    @Step(\"Get attribute {1} of element {0}\")\n    public static String getAttributeElement(By by, String attributeName) {\n        smartWait();\n        return waitForElementVisible(by).getAttribute(attributeName);\n    }\n\n    /**\n     * Get CSS value of an element\n     *\n     * @param by      Represent a web element as the By object\n     * @param cssName is CSS attribute name\n     * @return value of CSS attribute\n     */\n    @Step(\"Get CSS value {1} of element {0}\")\n    public static String getCssValueElement(By by, String cssName) {\n        smartWait();\n        return waitForElementVisible(by).getCssValue(cssName);\n    }\n\n    /**\n     * Get size of specified element\n     *\n     * @param by Represent a web element as the By object\n     * @return Dimension\n     */\n    @Step(\"Get Size of element {0}\")\n    public static Dimension getSizeElement(By by) {\n        smartWait();\n        return waitForElementVisible(by).getSize();\n    }\n\n    /**\n     * Get location of specified element\n     *\n     * @param by Represent a web element as the By object\n     * @return Point\n     */\n    @Step(\"Get Location of element {0}\")\n    public static Point getLocationElement(By by) {\n        smartWait();\n        return waitForElementVisible(by).getLocation();\n    }\n\n    /**\n     * Get tag name (HTML tag) of specified element\n     *\n     * @param by Represent a web element as the By object\n     * @return Tag name as String\n     */\n    @Step(\"Get Tag Name of element {0}\")\n    public static String getTagNameElement(By by) {\n        smartWait();\n        return waitForElementVisible(by).getTagName();\n    }\n\n    /**\n     * Check the value of each column of the table when searching according to EQUAL conditions (equals)\n     *\n     * @param column column position\n     * @param value  value to compare\n     */\n    @Step(\"Check data by EQUALS type after searching on the Table by Column.\")\n    public static void checkEqualsValueOnTableByColumn(int column, String value) {\n        smartWait();\n        sleep(1);\n        List<WebElement> totalRows = getWebElements(By.xpath(\"//tbody/tr\"));\n        LogUtils.info(\"Number of results for keywords (\" + value + \"): \" + totalRows.size());\n\n        if (totalRows.size() < 1) {\n            LogUtils.info(\"Not found value: \" + value);\n        } else {\n            for (int i = 1; i <= totalRows.size(); i++) {\n                boolean res = false;\n                WebElement title = waitForElementVisible(By.xpath(\"//tbody/tr[\" + i + \"]/td[\" + column + \"]\"));\n                res = title.getText().toUpperCase().equals(value.toUpperCase());\n                LogUtils.info(\"Row \" + i + \": \" + res + \" - \" + title.getText());\n                Assert.assertTrue(res, \"Row \" + i + \" (\" + title.getText() + \")\" + \" equals no value: \" + value);\n            }\n        }\n    }\n\n    /**\n     * Check the value of each column of the table when searching according to the CONTAINS condition (contains)\n     *\n     * @param column column position\n     * @param value  value to compare\n     */\n    @Step(\"Check data by CONTAINS type after searching on the Table by Column.\")\n    public static void checkContainsValueOnTableByColumn(int column, String value) {\n        smartWait();\n        sleep(1);\n        List<WebElement> totalRows = getWebElements(By.xpath(\"//tbody/tr\"));\n        LogUtils.info(\"Number of results for keywords (\" + value + \"): \" + totalRows.size());\n\n        if (totalRows.size() < 1) {\n            LogUtils.info(\"Not found value: \" + value);\n        } else {\n            for (int i = 1; i <= totalRows.size(); i++) {\n                boolean res = false;\n                WebElement title = waitForElementVisible(By.xpath(\"//tbody/tr[\" + i + \"]/td[\" + column + \"]\"));\n                res = title.getText().toUpperCase().contains(value.toUpperCase());\n                LogUtils.info(\"Row \" + i + \": \" + res + \" - \" + title.getText());\n                Assert.assertTrue(res, \"Row \" + i + \" (\" + title.getText() + \")\" + \" contains no value: \" + value);\n            }\n        }\n    }\n\n    /**\n     * Check the value of each column of the table when searching according to the CONTAINS condition with custom xpath\n     *\n     * @param column           column position\n     * @param value            value to compare\n     * @param xpathToTRtagname xpath value up to TR tag\n     */\n    @Step(\"Check data by CONTAINS type after searching on the Table by Column.\")\n    public static void checkContainsValueOnTableByColumn(int column, String value, String xpathToTRtagname) {\n        smartWait();\n\n        //xpathToTRtagname is locator from table to \"tr\" tagname of data section: //tbody/tr, //div[@id='example_wrapper']//tbody/tr, ...\n        List<WebElement> totalRows = DriverManager.getDriver().findElements(By.xpath(xpathToTRtagname));\n        sleep(1);\n        LogUtils.info(\"Number of results for keywords (\" + value + \"): \" + totalRows.size());\n\n        if (totalRows.size() < 1) {\n            LogUtils.info(\"Not found value: \" + value);\n        } else {\n            for (int i = 1; i <= totalRows.size(); i++) {\n                boolean res = false;\n                WebElement title = waitForElementVisible(By.xpath(xpathToTRtagname + \"[\" + i + \"]/td[\" + column + \"]\"));\n                res = title.getText().toUpperCase().contains(value.toUpperCase());\n                LogUtils.info(\"Row \" + i + \": \" + res + \" - \" + title.getText());\n                Assert.assertTrue(res, \"Row \" + i + \" (\" + title.getText() + \")\" + \" contains no value \" + value);\n            }\n        }\n    }\n\n    /**\n     * Get the value of a column from the table\n     *\n     * @param column column position\n     * @return array of values of a column\n     */\n    public static ArrayList getValueTableByColumn(int column) {\n        smartWait();\n\n        List<WebElement> totalRows = DriverManager.getDriver().findElements(By.xpath(\"//tbody/tr\"));\n        sleep(1);\n        LogUtils.info(\"Number of results for column (\" + column + \"): \" + totalRows.size()); //Không thích ghi log thì xóa nhen\n\n        ArrayList arrayList = new ArrayList<String>();\n\n        if (totalRows.size() < 1) {\n            LogUtils.info(\"Not found value !!\");\n        } else {\n            for (int i = 1; i <= totalRows.size(); i++) {\n                boolean res = false;\n                WebElement title = DriverManager.getDriver().findElement(By.xpath(\"//tbody/tr[\" + i + \"]/td[\" + column + \"]\"));\n                arrayList.add(title.getText());\n                LogUtils.info(\"Row \" + i + \":\" + title.getText()); //Không thích ghi log thì xóa nhen\n            }\n        }\n\n        return arrayList;\n    }\n\n    //Wait Element\n\n    /**\n     * Wait until the given web element is visible within the timeout.\n     *\n     * @param by      an element of object type By\n     * @param timeOut maximum timeout as second\n     * @return a WebElement object ready to be visible\n     */\n    public static WebElement waitForElementVisible(By by, int timeOut) {\n        smartWait();\n\n        try {\n            WebDriverWait wait = new WebDriverWait(DriverManager.getDriver(), Duration.ofSeconds(timeOut), Duration.ofMillis(500));\n\n            boolean check = verifyElementVisible(by, timeOut);\n            if (check == true) {\n                return wait.until(ExpectedConditions.visibilityOfElementLocated(by));\n            } else {\n                scrollToElementAtTop(by);\n                return wait.until(ExpectedConditions.visibilityOfElementLocated(by));\n            }\n        } catch (Throwable error) {\n            Assert.fail(\"Timeout waiting for the element Visible. \" + by.toString());\n            LogUtils.error(\"Timeout waiting for the element Visible. \" + by.toString());\n        }\n        return null;\n    }\n\n    /**\n     * Wait until the given web element is visible.\n     *\n     * @param by an element of object type By\n     * @return a WebElement object ready to be visible\n     */\n    public static WebElement waitForElementVisible(By by) {\n        smartWait();\n        waitForElementPresent(by);\n\n        try {\n            WebDriverWait wait = new WebDriverWait(DriverManager.getDriver(), Duration.ofSeconds(FrameworkConstants.WAIT_EXPLICIT), Duration.ofMillis(500));\n            boolean check = isElementVisible(by, 1);\n            if (check == true) {\n                return wait.until(ExpectedConditions.visibilityOfElementLocated(by));\n            } else {\n                scrollToElementAtBottom(by);\n                return wait.until(ExpectedConditions.visibilityOfElementLocated(by));\n            }\n        } catch (Throwable error) {\n            LogUtils.error(\"Timeout waiting for the element Visible. \" + by.toString());\n            Assert.fail(\"Timeout waiting for the element Visible. \" + by.toString());\n        }\n        return null;\n    }\n\n    /**\n     * Wait for the given element to be clickable within the given time (in seconds).\n     *\n     * @param by      an element of object type By\n     * @param timeOut maximum timeout as seconds\n     * @return a WebElement object ready to CLICK\n     */\n    public static WebElement waitForElementClickable(By by, long timeOut) {\n        smartWait();\n\n        try {\n            WebDriverWait wait = new WebDriverWait(DriverManager.getDriver(), Duration.ofSeconds(timeOut), Duration.ofMillis(500));\n            return wait.until(ExpectedConditions.elementToBeClickable(getWebElement(by)));\n        } catch (Throwable error) {\n            Assert.fail(\"Timeout waiting for the element ready to click. \" + by.toString());\n            LogUtils.error(\"Timeout waiting for the element ready to click. \" + by.toString());\n        }\n        return null;\n    }\n\n    /**\n     * Wait for the given element to be clickable.\n     *\n     * @param by an element of object type By\n     * @return a WebElement object ready to CLICK\n     */\n    public static WebElement waitForElementClickable(By by) {\n        smartWait();\n\n        try {\n            WebDriverWait wait = new WebDriverWait(DriverManager.getDriver(), Duration.ofSeconds(FrameworkConstants.WAIT_EXPLICIT), Duration.ofMillis(500));\n            return wait.until(ExpectedConditions.elementToBeClickable(getWebElement(by)));\n        } catch (Throwable error) {\n            Assert.fail(\"Timeout waiting for the element ready to click. \" + by.toString());\n            LogUtils.error(\"Timeout waiting for the element ready to click. \" + by.toString());\n        }\n        return null;\n    }\n\n    /**\n     * Wait for the given element to present within the given time (in seconds).\n     *\n     * @param by      an element of object type By\n     * @param timeOut maximum timeout as seconds\n     * @return an existing WebElement object\n     */\n    public static WebElement waitForElementPresent(By by, long timeOut) {\n        smartWait();\n\n        try {\n            WebDriverWait wait = new WebDriverWait(DriverManager.getDriver(), Duration.ofSeconds(timeOut), Duration.ofMillis(500));\n            return wait.until(ExpectedConditions.presenceOfElementLocated(by));\n        } catch (Throwable error) {\n            LogUtils.error(\"Timeout waiting for the element to exist. \" + by.toString());\n            Assert.fail(\"Timeout waiting for the element to exist. \" + by.toString());\n        }\n\n        return null;\n    }\n\n    /**\n     * Wait for the given element to present\n     *\n     * @param by an element of object type By\n     * @return an existing WebElement object\n     */\n    public static WebElement waitForElementPresent(By by) {\n        smartWait();\n\n        try {\n            WebDriverWait wait = new WebDriverWait(DriverManager.getDriver(), Duration.ofSeconds(FrameworkConstants.WAIT_EXPLICIT), Duration.ofMillis(500));\n            return wait.until(ExpectedConditions.presenceOfElementLocated(by));\n        } catch (Throwable error) {\n            LogUtils.error(\"Element not exist. \" + by.toString());\n            Assert.fail(\"Element not exist. \" + by.toString());\n        }\n        return null;\n    }\n\n    /**\n     * Wait for an alert to present.\n     */\n    public static boolean waitForAlertPresent() {\n        smartWait();\n\n        try {\n            WebDriverWait wait = new WebDriverWait(DriverManager.getDriver(), Duration.ofSeconds(FrameworkConstants.WAIT_EXPLICIT), Duration.ofMillis(500));\n            wait.until(ExpectedConditions.alertIsPresent());\n            return true;\n        } catch (Throwable error) {\n            LogUtils.error(\"Alert NOT present.\");\n            Assert.fail(\"Alert NOT present.\");\n            return false;\n        }\n    }\n\n    /**\n     * Wait for an alert to present.\n     *\n     * @param timeOut Timeout waiting for an alert to present.\n     */\n    public static boolean waitForAlertPresent(int timeOut) {\n        smartWait();\n\n        try {\n            WebDriverWait wait = new WebDriverWait(DriverManager.getDriver(), Duration.ofSeconds(timeOut), Duration.ofMillis(500));\n            wait.until(ExpectedConditions.alertIsPresent());\n            return true;\n        } catch (Throwable error) {\n            LogUtils.error(\"Alert NOT present.\");\n            Assert.fail(\"Alert NOT present.\");\n            return false;\n        }\n    }\n\n    /**\n     * Wait until the given web element has an attribute with the specified name.\n     *\n     * @param by            an element of object type By\n     * @param attributeName The name of the attribute to wait for.\n     * @return true/false\n     */\n    public static boolean waitForElementHasAttribute(By by, String attributeName) {\n        smartWait();\n\n        try {\n            WebDriverWait wait = new WebDriverWait(DriverManager.getDriver(), Duration.ofSeconds(FrameworkConstants.WAIT_EXPLICIT), Duration.ofMillis(500));\n            return wait.until(ExpectedConditions.attributeToBeNotEmpty(waitForElementPresent(by), attributeName));\n        } catch (Throwable error) {\n            LogUtils.error(\"Timeout for element \" + by.toString() + \" to exist attribute: \" + attributeName);\n            Assert.fail(\"Timeout for element \" + by.toString() + \" to exist attribute: \" + attributeName);\n        }\n        return false;\n    }\n\n    /**\n     * Verify if the web element has an attribute with the specified name and value.\n     *\n     * @param by             an element of object type By\n     * @param attributeName  The name of the attribute to wait for.\n     * @param attributeValue The value of attribute\n     * @return true/false\n     */\n    @Step(\"Verify element {0} with attribute {1} has value is {2}\")\n    public static boolean verifyElementAttributeValue(By by, String attributeName, String attributeValue) {\n        smartWait();\n\n        waitForElementVisible(by);\n        try {\n            WebDriverWait wait = new WebDriverWait(DriverManager.getDriver(), Duration.ofSeconds(FrameworkConstants.WAIT_EXPLICIT), Duration.ofMillis(500));\n            wait.until(ExpectedConditions.attributeToBe(by, attributeName, attributeValue));\n            return true;\n        } catch (Throwable error) {\n            LogUtils.error(\"Object: \" + by.toString() + \". Not found value: \" + attributeValue + \" with attribute type: \" + attributeName + \". Actual get Attribute value is: \" + getAttributeElement(by, attributeName));\n            Assert.fail(\"Object: \" + by.toString() + \". Not found value: \" + attributeValue + \" with attribute type: \" + attributeName + \". Actual get Attribute value is: \" + getAttributeElement(by, attributeName));\n            return false;\n        }\n    }\n\n    /**\n     * Verify if the web element has an attribute with the specified name.\n     *\n     * @param by            Represent a web element.\n     * @param attributeName The name of the attribute to wait for.\n     * @param timeOut       System will wait at most timeout (seconds) to return result\n     * @return true/false\n     */\n    @Step(\"Verify element {0} has attribute {1} with timeout {2} second\")\n    public static boolean verifyElementHasAttribute(By by, String attributeName, int timeOut) {\n        try {\n            WebDriverWait wait = new WebDriverWait(DriverManager.getDriver(), Duration.ofSeconds(timeOut));\n            wait.until(ExpectedConditions.attributeToBeNotEmpty(waitForElementPresent(by), attributeName));\n            return true;\n        } catch (Throwable error) {\n            LogUtils.error(\"Not found Attribute \" + attributeName + \" of element \" + by.toString());\n            Assert.fail(\"Not found Attribute \" + attributeName + \" of element \" + by.toString());\n            return false;\n        }\n    }\n\n\n    /**\n     * Wait for a page to load with the default time from the config\n     */\n    public static void waitForPageLoaded() {\n        WebDriverWait wait = new WebDriverWait(DriverManager.getDriver(), Duration.ofSeconds(FrameworkConstants.WAIT_PAGE_LOADED), Duration.ofMillis(500));\n        JavascriptExecutor js = (JavascriptExecutor) DriverManager.getDriver();\n\n        // wait for Javascript to loaded\n        ExpectedCondition<Boolean> jsLoad = driver -> ((JavascriptExecutor) driver).executeScript(\"return document.readyState\").toString().equals(\"complete\");\n\n        //Get JS is Ready\n        boolean jsReady = js.executeScript(\"return document.readyState\").toString().equals(\"complete\");\n\n        //Wait Javascript until it is Ready!\n        if (!jsReady) {\n            LogUtils.info(\"Javascript in NOT Ready!\");\n            //Wait for Javascript to load\n            try {\n                wait.until(jsLoad);\n            } catch (Throwable error) {\n                error.printStackTrace();\n                Assert.fail(\"Timeout waiting for page load. (\" + FrameworkConstants.WAIT_PAGE_LOADED + \"s)\");\n            }\n        }\n    }\n\n    /**\n     * Wait for a page to load within the given time (in seconds)\n     */\n    public static void waitForPageLoaded(int timeOut) {\n        WebDriverWait wait = new WebDriverWait(DriverManager.getDriver(), Duration.ofSeconds(timeOut), Duration.ofMillis(500));\n        JavascriptExecutor js = (JavascriptExecutor) DriverManager.getDriver();\n\n        // wait for Javascript to loaded\n        ExpectedCondition<Boolean> jsLoad = driver -> ((JavascriptExecutor) driver).executeScript(\"return document.readyState\").toString().equals(\"complete\");\n\n        //Get JS is Ready\n        boolean jsReady = js.executeScript(\"return document.readyState\").toString().equals(\"complete\");\n\n        //Wait Javascript until it is Ready!\n        if (!jsReady) {\n            LogUtils.info(\"Javascript in NOT Ready!\");\n            //Wait for Javascript to load\n            try {\n                wait.until(jsLoad);\n            } catch (Throwable error) {\n                error.printStackTrace();\n                Assert.fail(\"Timeout waiting for page load. (\" + FrameworkConstants.WAIT_PAGE_LOADED + \"s)\");\n            }\n        }\n    }\n\n    /**\n     * Wait for JQuery to finish loading with default time from config\n     */\n    public static void waitForJQueryLoad() {\n        WebDriverWait wait = new WebDriverWait(DriverManager.getDriver(), Duration.ofSeconds(FrameworkConstants.WAIT_PAGE_LOADED), Duration.ofMillis(500));\n        JavascriptExecutor js = (JavascriptExecutor) DriverManager.getDriver();\n\n        //Wait for jQuery to load\n        ExpectedCondition<Boolean> jQueryLoad = driver -> {\n            assert driver != null;\n            return ((Long) ((JavascriptExecutor) driver).executeScript(\"return jQuery.active\") == 0);\n        };\n\n        //Get JQuery is Ready\n        boolean jqueryReady = (Boolean) js.executeScript(\"return jQuery.active==0\");\n\n        //Wait JQuery until it is Ready!\n        if (!jqueryReady) {\n            LogUtils.info(\"JQuery is NOT Ready!\");\n            try {\n                //Wait for jQuery to load\n                wait.until(jQueryLoad);\n            } catch (Throwable error) {\n                Assert.fail(\"Timeout waiting for JQuery load. (\" + FrameworkConstants.WAIT_PAGE_LOADED + \"s)\");\n            }\n        }\n    }\n\n    /**\n     * Wait for Angular to finish loading with default time from config\n     */\n    public static void waitForAngularLoad() {\n        WebDriverWait wait = new WebDriverWait(DriverManager.getDriver(), Duration.ofSeconds(FrameworkConstants.WAIT_PAGE_LOADED), Duration.ofMillis(500));\n        JavascriptExecutor js = (JavascriptExecutor) DriverManager.getDriver();\n        final String angularReadyScript = \"return angular.element(document).injector().get('$http').pendingRequests.length === 0\";\n\n        //Wait for ANGULAR to load\n        ExpectedCondition<Boolean> angularLoad = driver -> {\n            assert driver != null;\n            return Boolean.valueOf(((JavascriptExecutor) driver).executeScript(angularReadyScript).toString());\n        };\n\n        //Get Angular is Ready\n        boolean angularReady = Boolean.parseBoolean(js.executeScript(angularReadyScript).toString());\n\n        //Wait ANGULAR until it is Ready!\n        if (!angularReady) {\n            LogUtils.warn(\"Angular is NOT Ready!\");\n            //Wait for Angular to load\n            try {\n                //Wait for jQuery to load\n                wait.until(angularLoad);\n            } catch (Throwable error) {\n                Assert.fail(\"Timeout waiting for Angular load. (\" + FrameworkConstants.WAIT_PAGE_LOADED + \"s)\");\n            }\n        }\n\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/pftest/keywords/WebUI.java b/src/main/java/org/pftest/keywords/WebUI.java
--- a/src/main/java/org/pftest/keywords/WebUI.java	(revision 68abd430f82de6dedf2b26c3e7669a3e705fcd50)
+++ b/src/main/java/org/pftest/keywords/WebUI.java	(date 1714066190645)
@@ -1,8 +1,3 @@
-/*
- * Copyright (c) 2022 Anh Tester
- * Automation Framework Selenium
- */
-
 package org.pftest.keywords;
 
 import org.pftest.constants.FrameworkConstants;
@@ -3207,6 +3202,7 @@
             //Wait for Javascript to load
             try {
                 wait.until(jsLoad);
+                wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt(FrameworkConstants.APP_IFRAME));
             } catch (Throwable error) {
                 error.printStackTrace();
                 Assert.fail("Timeout waiting for page load. (" + FrameworkConstants.WAIT_PAGE_LOADED + "s)");
@@ -3233,6 +3229,7 @@
             //Wait for Javascript to load
             try {
                 wait.until(jsLoad);
+                wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt("app-iframe"));
             } catch (Throwable error) {
                 error.printStackTrace();
                 Assert.fail("Timeout waiting for page load. (" + FrameworkConstants.WAIT_PAGE_LOADED + "s)");
Index: src/test/java/org/pftest/projects/testcases/SampleTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.pftest.projects.testcases;\n\nimport io.qameta.allure.Epic;\nimport io.qameta.allure.Feature;\nimport org.pftest.base.BaseTest;\nimport org.testng.annotations.Test;\n\n\n@Epic(\"Sample Test\")\n@Feature(\"Sample Test Feature\")\npublic class SampleTest extends BaseTest {\n    @Test\n    public void sampleTest() {\n        getEditorPage();\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/org/pftest/projects/testcases/SampleTest.java b/src/test/java/org/pftest/projects/testcases/SampleTest.java
--- a/src/test/java/org/pftest/projects/testcases/SampleTest.java	(revision 68abd430f82de6dedf2b26c3e7669a3e705fcd50)
+++ b/src/test/java/org/pftest/projects/testcases/SampleTest.java	(date 1714064977046)
@@ -11,6 +11,6 @@
 public class SampleTest extends BaseTest {
     @Test
     public void sampleTest() {
-        getEditorPage();
+        getEditorPage().openHomePage();
     }
 }
Index: src/test/java/org/pftest/projects/pages/pages/EditorPage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.pftest.projects.pages.pages;\n\nimport org.openqa.selenium.By;\nimport org.pftest.projects.CommonPage;\n\nimport java.util.UUID;\n\nimport static org.pftest.keywords.WebUI.*;\n\npublic class EditorPage extends CommonPage {\n    private By headerBar = By.id(\"editor-header-bar\");\n    private By inspector = By.id(\"editor--inspector\");\n    private By pageOutline = By.id(\"page-outline-section\");\n    private By editorDnd = By.id(\"editor-dnd-wrapper\");\n    private By pageTitle = By.id(\"editor-header-bar--page-title\");\n\n//    public void openHomePage() {\n//        String URL = \"https://admin.shopify.com/store/quynhquynhiee/apps/rc-pagefly-1/editor?type=home&id=\" + UUID.randomUUID();\n//        openWebsite(URL);\n//    }\n\n\n    public void changePageTitle (String title) {\n\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/org/pftest/projects/pages/pages/EditorPage.java b/src/test/java/org/pftest/projects/pages/pages/EditorPage.java
--- a/src/test/java/org/pftest/projects/pages/pages/EditorPage.java	(revision 68abd430f82de6dedf2b26c3e7669a3e705fcd50)
+++ b/src/test/java/org/pftest/projects/pages/pages/EditorPage.java	(date 1714064977040)
@@ -1,6 +1,7 @@
 package org.pftest.projects.pages.pages;
 
 import org.openqa.selenium.By;
+import org.openqa.selenium.Keys;
 import org.pftest.projects.CommonPage;
 
 import java.util.UUID;
@@ -14,10 +15,13 @@
     private By editorDnd = By.id("editor-dnd-wrapper");
     private By pageTitle = By.id("editor-header-bar--page-title");
 
-//    public void openHomePage() {
-//        String URL = "https://admin.shopify.com/store/quynhquynhiee/apps/rc-pagefly-1/editor?type=home&id=" + UUID.randomUUID();
-//        openWebsite(URL);
-//    }
+    public void openHomePage() {
+        String URL = "https://admin.shopify.com/store/quynhquynhiee/apps/rc-pagefly-1/editor?type=home&id=" + UUID.randomUUID();
+        openWebsite(URL);
+        clickElement(pageTitle);
+        clearAndFillText(pageTitle, "Home Page");
+        sendKeys(Keys.ENTER);
+    }
 
 
     public void changePageTitle (String title) {
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"e4a49eb7-4aa6-4344-a0e5-fffc133666e9\" name=\"Changes\" comment=\"\">\n      <change afterPath=\"$PROJECT_DIR$/.gitignore\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/.idea/encodings.xml\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/.idea/uiDesigner.xml\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/.idea/vcs.xml\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/.mvn/wrapper/maven-wrapper.jar\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/.mvn/wrapper/maven-wrapper.properties\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/browsers.json\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/mvnw\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/mvnw.cmd\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/pom.xml\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/pftest/constants/FrameworkConstants.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/pftest/driver/BrowserFactory.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/pftest/driver/DriverManager.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/pftest/driver/TargetFactory.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/pftest/enums/FailureHandling.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/pftest/helpers/FileHelpers.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/pftest/helpers/Helpers.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/pftest/helpers/PropertiesHelpers.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/pftest/keywords/WebUI.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/pftest/report/AllureManager.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/pftest/utils/BrowserInfoUtils.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/pftest/utils/DateUtils.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/pftest/utils/LogUtils.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/pftest/utils/ReportUtils.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/test/java/org/pftest/MainPage.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/test/java/org/pftest/MainPageTest.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/test/java/org/pftest/base/BaseTest.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/test/java/org/pftest/projects/CommonPage.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/test/java/org/pftest/projects/pages/pages/AdminShopifyPage.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/test/java/org/pftest/projects/pages/pages/EditorPage.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/test/java/org/pftest/projects/testcases/SampleTest.java\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/test/resources/config/allure.properties\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/test/resources/config/allure/categories.json\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/test/resources/config/allure/environment.xml\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/test/resources/config/allure/executor.json\" afterDir=\"false\" />\n      <change afterPath=\"$PROJECT_DIR$/src/test/resources/config/config.properties\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Enum\" />\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"MavenImportPreferences\">\n    <option name=\"generalSettings\">\n      <MavenGeneralSettings>\n        <option name=\"mavenHomeTypeForPersistence\" value=\"WRAPPER\" />\n      </MavenGeneralSettings>\n    </option>\n  </component>\n  <component name=\"ProjectColorInfo\"><![CDATA[{\n  \"associatedIndex\": 5\n}]]></component>\n  <component name=\"ProjectId\" id=\"2fZUBXoXjCTaxw0h5oHTCglBVxc\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\"><![CDATA[{\n  \"keyToString\": {\n    \"Downloaded.Files.Path.Enabled\": \"false\",\n    \"Repository.Attach.Annotations\": \"false\",\n    \"Repository.Attach.JavaDocs\": \"false\",\n    \"Repository.Attach.Sources\": \"false\",\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\n    \"git-widget-placeholder\": \"master\",\n    \"kotlin-language-version-configured\": \"true\",\n    \"last_opened_file_path\": \"/Users/bbadmin/Documents/pftest/src/test/resources/config\",\n    \"node.js.detected.package.eslint\": \"true\",\n    \"node.js.detected.package.tslint\": \"true\",\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\n    \"nodejs_package_manager_path\": \"npm\",\n    \"project.structure.last.edited\": \"Modules\",\n    \"project.structure.proportion\": \"0.15\",\n    \"project.structure.side.proportion\": \"0.49195403\",\n    \"settings.editor.selected.configurable\": \"preferences.keymap\",\n    \"vue.rearranger.settings.migration\": \"true\"\n  }\n}]]></component>\n  <component name=\"RecentsManager\">\n    <key name=\"CopyFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/src/test/resources/config\" />\n    </key>\n    <key name=\"CopyClassDialog.RECENTS_KEY\">\n      <recent name=\"org.pftest.keywords\" />\n    </key>\n  </component>\n  <component name=\"RunManager\">\n    <configuration name=\"SampleTest\" type=\"TestNG\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"pftest\" />\n      <extension name=\"coverage\">\n        <pattern>\n          <option name=\"PATTERN\" value=\"org.pftest.projects.testcases.*\" />\n          <option name=\"ENABLED\" value=\"true\" />\n        </pattern>\n      </extension>\n      <option name=\"PACKAGE_NAME\" value=\"org.pftest.projects.testcases\" />\n      <option name=\"MAIN_CLASS_NAME\" value=\"org.pftest.projects.testcases.SampleTest\" />\n      <option name=\"TEST_OBJECT\" value=\"CLASS\" />\n      <properties />\n      <listeners />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"TestNG.SampleTest\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SeleniumInternalSettingsState\">\n    <option name=\"lastFrameworkName\" value=\"Selenium\" />\n    <option name=\"lastLanguageId\" value=\"JAVA\" />\n    <option name=\"lastUrl\" value=\"https://admin.shopify.com/store/quynhquynhiee/apps/pageflybackend-9/pages\" />\n  </component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"bundled-jdk-9f38398b9061-18abd8497189-intellij.indexing.shared.core-IU-241.14494.240\" />\n        <option value=\"bundled-js-predefined-1d06a55b98c1-74d2a5396914-JavaScript-IU-241.14494.240\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"e4a49eb7-4aa6-4344-a0e5-fffc133666e9\" name=\"Changes\" comment=\"\" />\n      <created>1714007961095</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1714007961095</updated>\n      <workItem from=\"1714007961267\" duration=\"24166000\" />\n    </task>\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"XDebuggerManager\">\n    <breakpoint-manager>\n      <breakpoints>\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\n          <url>file://$PROJECT_DIR$/src/main/java/org/pftest/helpers/PropertiesHelpers.java</url>\n          <line>22</line>\n          <option name=\"timeStamp\" value=\"1\" />\n        </line-breakpoint>\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\n          <url>file://$PROJECT_DIR$/src/test/java/org/pftest/projects/pages/pages/EditorPage.java</url>\n          <line>21</line>\n          <option name=\"timeStamp\" value=\"2\" />\n        </line-breakpoint>\n      </breakpoints>\n    </breakpoint-manager>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 68abd430f82de6dedf2b26c3e7669a3e705fcd50)
+++ b/.idea/workspace.xml	(date 1714095604753)
@@ -5,44 +5,26 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="e4a49eb7-4aa6-4344-a0e5-fffc133666e9" name="Changes" comment="">
-      <change afterPath="$PROJECT_DIR$/.gitignore" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/.idea/encodings.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/.idea/uiDesigner.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/.idea/vcs.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/.mvn/wrapper/maven-wrapper.jar" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/.mvn/wrapper/maven-wrapper.properties" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/browsers.json" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/mvnw" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/mvnw.cmd" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/pom.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/pftest/constants/FrameworkConstants.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/pftest/driver/BrowserFactory.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/pftest/driver/DriverManager.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/pftest/driver/TargetFactory.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/pftest/enums/FailureHandling.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/pftest/helpers/FileHelpers.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/pftest/helpers/Helpers.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/pftest/helpers/PropertiesHelpers.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/pftest/keywords/WebUI.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/pftest/report/AllureManager.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/pftest/utils/BrowserInfoUtils.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/pftest/utils/DateUtils.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/pftest/utils/LogUtils.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/org/pftest/utils/ReportUtils.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/test/java/org/pftest/MainPage.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/test/java/org/pftest/MainPageTest.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/test/java/org/pftest/base/BaseTest.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/test/java/org/pftest/projects/CommonPage.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/test/java/org/pftest/projects/pages/pages/AdminShopifyPage.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/test/java/org/pftest/projects/pages/pages/EditorPage.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/test/java/org/pftest/projects/testcases/SampleTest.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/test/resources/config/allure.properties" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/test/resources/config/allure/categories.json" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/test/resources/config/allure/environment.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/test/resources/config/allure/executor.json" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/test/resources/config/config.properties" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/org/pftest/annotations/CustomAnnotation.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/org/pftest/enums/Author.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/org/pftest/enums/Category.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/org/pftest/enums/Platform.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.gitignore" beforeDir="false" afterPath="$PROJECT_DIR$/.gitignore" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/allure-results/24dd2e35-d1cf-4c4c-b17c-889088c69e83-container.json" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/allure-results/26f0b235-59d2-41d9-bd84-5e7682e8d8f9-container.json" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/allure-results/420c0c33-b280-4125-ad13-21461990e23b-container.json" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/allure-results/93f2d34a-7dba-4a91-95f3-de2ecb505d44-result.json" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/allure-results/c54da87d-d87f-4d23-8eaf-808c4e179595-container.json" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/allure-results/f16c9e6c-573a-4fa5-ac0c-3827c67ebc54-container.json" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/pftest/constants/FrameworkConstants.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/pftest/constants/FrameworkConstants.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/pftest/driver/BrowserFactory.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/pftest/driver/BrowserFactory.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/pftest/keywords/WebUI.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/pftest/keywords/WebUI.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/test/java/org/pftest/projects/CommonPage.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/org/pftest/projects/CommonPage.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/test/java/org/pftest/projects/pages/pages/AdminShopifyPage.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/test/java/org/pftest/projects/pages/pages/EditorPage.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/org/pftest/projects/pages/pages/EditorPage.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/test/java/org/pftest/projects/testcases/SampleTest.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/org/pftest/projects/testcases/SampleTest.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/test/resources/config/config.properties" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/resources/config/config.properties" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -52,14 +34,23 @@
   <component name="FileTemplateManagerImpl">
     <option name="RECENT_TEMPLATES">
       <list>
-        <option value="Enum" />
         <option value="Class" />
+        <option value="Interface" />
+        <option value="AnnotationType" />
+        <option value="Enum" />
       </list>
     </option>
   </component>
   <component name="Git.Settings">
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
   </component>
+  <component name="HighlightingSettingsPerFile">
+    <setting file="jar://$MAVEN_REPOSITORY$/org/seleniumhq/selenium/selenium-remote-driver/4.19.1/selenium-remote-driver-4.19.1.jar!/org/openqa/selenium/devtools/CdpVersionFinder.class" root0="SKIP_INSPECTION" />
+  </component>
+  <component name="KubernetesApiPersistence">{}</component>
+  <component name="KubernetesApiProvider">{
+  &quot;isMigrated&quot;: true
+}</component>
   <component name="MavenImportPreferences">
     <option name="generalSettings">
       <MavenGeneralSettings>
@@ -67,9 +58,12 @@
       </MavenGeneralSettings>
     </option>
   </component>
-  <component name="ProjectColorInfo"><![CDATA[{
-  "associatedIndex": 5
-}]]></component>
+  <component name="ProblemsViewState">
+    <option name="selectedTabId" value="QODANA_PROBLEMS_VIEW_TAB" />
+  </component>
+  <component name="ProjectColorInfo">{
+  &quot;associatedIndex&quot;: 5
+}</component>
   <component name="ProjectId" id="2fZUBXoXjCTaxw0h5oHTCglBVxc" />
   <component name="ProjectLevelVcsManager" settingsEditedManually="true">
     <ConfirmationsSetting value="2" id="Add" />
@@ -80,12 +74,16 @@
   </component>
   <component name="PropertiesComponent"><![CDATA[{
   "keyToString": {
+    "ASKED_ADD_EXTERNAL_FILES": "true",
     "Downloaded.Files.Path.Enabled": "false",
+    "Maven.pftest [clean].executor": "Run",
+    "Maven.pftest [install].executor": "Run",
     "Repository.Attach.Annotations": "false",
     "Repository.Attach.JavaDocs": "false",
     "Repository.Attach.Sources": "false",
     "RunOnceActivity.ShowReadmeOnStart": "true",
     "SHARE_PROJECT_CONFIGURATION_FILES": "true",
+    "TestNG.SampleTest.executor": "Run",
     "git-widget-placeholder": "master",
     "kotlin-language-version-configured": "true",
     "last_opened_file_path": "/Users/bbadmin/Documents/pftest/src/test/resources/config",
@@ -97,7 +95,7 @@
     "project.structure.last.edited": "Modules",
     "project.structure.proportion": "0.15",
     "project.structure.side.proportion": "0.49195403",
-    "settings.editor.selected.configurable": "preferences.keymap",
+    "settings.editor.selected.configurable": "preferences.pluginManager",
     "vue.rearranger.settings.migration": "true"
   }
 }]]></component>
@@ -154,13 +152,28 @@
       <option name="number" value="Default" />
       <option name="presentableId" value="Default" />
       <updated>1714007961095</updated>
-      <workItem from="1714007961267" duration="24166000" />
+      <workItem from="1714007961267" duration="25330000" />
+      <workItem from="1714043077782" duration="17983000" />
     </task>
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
     <option name="version" value="3" />
   </component>
+  <component name="Vcs.Log.Tabs.Properties">
+    <option name="TAB_STATES">
+      <map>
+        <entry key="MAIN">
+          <value>
+            <State />
+          </value>
+        </entry>
+      </map>
+    </option>
+  </component>
+  <component name="VcsManagerConfiguration">
+    <option name="ADD_EXTERNAL_FILES_SILENTLY" value="true" />
+  </component>
   <component name="XDebuggerManager">
     <breakpoint-manager>
       <breakpoints>
@@ -171,7 +184,7 @@
         </line-breakpoint>
         <line-breakpoint enabled="true" type="java-line">
           <url>file://$PROJECT_DIR$/src/test/java/org/pftest/projects/pages/pages/EditorPage.java</url>
-          <line>21</line>
+          <line>25</line>
           <option name="timeStamp" value="2" />
         </line-breakpoint>
       </breakpoints>
Index: src/test/resources/config/config.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># DATE: 2024-04-25\n#\nAUTHOR=QuynhNN\n\n# Project report information\nPROJECT_NAME = \"PageFly Automation Test\"\nREPORT_TITLE = \"PageFly Automation Test Report\"\nEXTENT_REPORT_NAME = ExtentReports\nEXTENT_REPORT_FOLDER = reports/ExtentReports\nEXPORT_VIDEO_PATH = ExportData/Videos\nEXPORT_CAPTURE_PATH = ExportData/Images\n\n# Default browser (chrome, edge, firefox, safari)\nBROWSER = chrome\nHEADLESS = false\n\n# Smart wait time (seconds)\nWAIT_DEFAULT = 5\nWAIT_IMPLICIT = 20\nWAIT_EXPLICIT = 10\nWAIT_PAGE_LOADED = 60\n# Shall wait for the page to load for every step\nACTIVE_PAGE_LOADED = true\n# Shall wait for the page to load for every step\nWAIT_SLEEP_STEP = 0\n\n# Passed Steps Screenshot\nSCREENSHOT_PASSED_STEPS = false\n# Failed Steps Screenshot\nSCREENSHOT_FAILED_STEPS = true\n# Skipped Steps Screenshot\nSCREENSHOT_SKIPPED_STEPS = true\n# All Steps Screenshot\nSCREENSHOT_ALL_STEPS = false\n# Video Record\nVIDEO_RECORD = false\n\n# If true -> Report name will be ExtentReports.html\nOVERRIDE_REPORTS = true\n# If true -> Open the report after execution\nOPEN_REPORTS_AFTER_EXECUTION = false
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/test/resources/config/config.properties b/src/test/resources/config/config.properties
--- a/src/test/resources/config/config.properties	(revision 68abd430f82de6dedf2b26c3e7669a3e705fcd50)
+++ b/src/test/resources/config/config.properties	(date 1714064731666)
@@ -1,8 +1,16 @@
 # DATE: 2024-04-25
 #
-AUTHOR=QuynhNN
+
+# PageFly app iframe name
+APP_IFRAME = app-iframe
+
+# Browser execute path
+BROWSER_BINARY = /Users/bbadmin/chrome/mac_arm-122.0.6261.69/chrome-mac-arm64/Google Chrome for Testing.app/Contents/MacOS/Google Chrome for Testing
+USER_DATA_DIR = /Users/bbadmin/Library/Application Support/Google/Chrome for Testing
+PROFILE_DIRECTORY = Profile 1
 
 # Project report information
+AUTHOR=QuynhNN
 PROJECT_NAME = "PageFly Automation Test"
 REPORT_TITLE = "PageFly Automation Test Report"
 EXTENT_REPORT_NAME = ExtentReports
Index: src/main/java/org/pftest/enums/Category.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/pftest/enums/Category.java b/src/main/java/org/pftest/enums/Category.java
new file mode 100644
--- /dev/null	(date 1714047589654)
+++ b/src/main/java/org/pftest/enums/Category.java	(date 1714047589654)
@@ -0,0 +1,5 @@
+package org.pftest.enums;
+
+public enum Category {
+    REGRESSION
+}
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>target/\n!.mvn/wrapper/maven-wrapper.jar\n!**/src/main/**/target/\n!**/src/test/**/target/\n\n### IntelliJ IDEA ###\n.idea/modules.xml\n.idea/jarRepositories.xml\n.idea/compiler.xml\n.idea/libraries/\n*.iws\n*.iml\n*.ipr\n\n### Eclipse ###\n.apt_generated\n.classpath\n.factorypath\n.project\n.settings\n.springBeans\n.sts4-cache\n\n### NetBeans ###\n/nbproject/private/\n/nbbuild/\n/dist/\n/nbdist/\n/.nb-gradle/\nbuild/\n!**/src/main/**/build/\n!**/src/test/**/build/\n\n### VS Code ###\n.vscode/\n\n### Mac OS ###\n.DS_Store
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
--- a/.gitignore	(revision 68abd430f82de6dedf2b26c3e7669a3e705fcd50)
+++ b/.gitignore	(date 1714095298775)
@@ -35,4 +35,6 @@
 .vscode/
 
 ### Mac OS ###
-.DS_Store
\ No newline at end of file
+.DS_Store
+
+target/allure-results/
\ No newline at end of file
Index: src/main/java/org/pftest/constants/FrameworkConstants.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.pftest.constants;\n\nimport org.pftest.helpers.Helpers;\nimport org.pftest.helpers.PropertiesHelpers;\nimport org.pftest.utils.ReportUtils;\n\nimport java.io.File;\n\npublic class FrameworkConstants {\n    private FrameworkConstants() {\n        super();\n    }\n\n    static {\n        PropertiesHelpers.loadAllFiles();\n    }\n\n    public static final String PROJECT_PATH = Helpers.getCurrentDir();\n\n    public static final int WAIT_DEFAULT = Integer.parseInt(PropertiesHelpers.getValue(\"WAIT_DEFAULT\"));\n    public static final int WAIT_IMPLICIT = Integer.parseInt(PropertiesHelpers.getValue(\"WAIT_IMPLICIT\"));\n    public static final int WAIT_EXPLICIT = Integer.parseInt(PropertiesHelpers.getValue(\"WAIT_EXPLICIT\"));\n    public static final int WAIT_PAGE_LOADED = Integer.parseInt(PropertiesHelpers.getValue(\"WAIT_PAGE_LOADED\"));\n    public static final int WAIT_SLEEP_STEP = Integer.parseInt(PropertiesHelpers.getValue(\"WAIT_SLEEP_STEP\"));\n    public static final String ACTIVE_PAGE_LOADED = PropertiesHelpers.getValue(\"ACTIVE_PAGE_LOADED\");\n    public static final String BROWSER = PropertiesHelpers.getValue(\"BROWSER\");\n\n    public static final String AUTHOR = PropertiesHelpers.getValue(\"AUTHOR\");\n    public static final String HEADLESS = PropertiesHelpers.getValue(\"HEADLESS\");\n    public static final String OVERRIDE_REPORTS = PropertiesHelpers.getValue(\"OVERRIDE_REPORTS\");\n    public static final String OPEN_REPORTS_AFTER_EXECUTION = PropertiesHelpers.getValue(\"OPEN_REPORTS_AFTER_EXECUTION\");\n    public static final String SCREENSHOT_PASSED_STEPS = PropertiesHelpers.getValue(\"SCREENSHOT_PASSED_STEPS\");\n    public static final String SCREENSHOT_FAILED_STEPS = PropertiesHelpers.getValue(\"SCREENSHOT_FAILED_STEPS\");\n    public static final String SCREENSHOT_SKIPPED_STEPS = PropertiesHelpers.getValue(\"SCREENSHOT_SKIPPED_STEPS\");\n    public static final String SCREENSHOT_ALL_STEPS = PropertiesHelpers.getValue(\"SCREENSHOT_ALL_STEPS\");\n\n    public static final String REPORT_TITLE = PropertiesHelpers.getValue(\"REPORT_TITLE\");\n    public static final String EXTENT_REPORT_FOLDER = PropertiesHelpers.getValue(\"EXTENT_REPORT_FOLDER\");\n    public static final String EXTENT_REPORT_NAME = PropertiesHelpers.getValue(\"EXTENT_REPORT_NAME\");\n    public static final String EXPORT_VIDEO_PATH = PropertiesHelpers.getValue(\"EXPORT_VIDEO_PATH\");\n    public static final String EXPORT_CAPTURE_PATH = PropertiesHelpers.getValue(\"EXPORT_CAPTURE_PATH\");\n    public static final String VIDEO_RECORD = PropertiesHelpers.getValue(\"VIDEO_RECORD\");\n\n\n    public static final String EXTENT_REPORT_FOLDER_PATH = PROJECT_PATH + EXTENT_REPORT_FOLDER;\n    public static final String EXTENT_REPORT_FILE_NAME = EXTENT_REPORT_NAME + \".html\";\n    public static String EXTENT_REPORT_FILE_PATH = EXTENT_REPORT_FOLDER_PATH + File.separator + EXTENT_REPORT_FILE_NAME;\n    public static String getExtentReportFilePath() {\n        if (EXTENT_REPORT_FILE_PATH.isEmpty()) {\n            EXTENT_REPORT_FILE_PATH = ReportUtils.createExtentReportPath();\n        }\n        return EXTENT_REPORT_FILE_PATH;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/pftest/constants/FrameworkConstants.java b/src/main/java/org/pftest/constants/FrameworkConstants.java
--- a/src/main/java/org/pftest/constants/FrameworkConstants.java	(revision 68abd430f82de6dedf2b26c3e7669a3e705fcd50)
+++ b/src/main/java/org/pftest/constants/FrameworkConstants.java	(date 1714064731711)
@@ -16,6 +16,7 @@
     }
 
     public static final String PROJECT_PATH = Helpers.getCurrentDir();
+    public static final String APP_IFRAME = PropertiesHelpers.getValue("APP_IFRAME");
 
     public static final int WAIT_DEFAULT = Integer.parseInt(PropertiesHelpers.getValue("WAIT_DEFAULT"));
     public static final int WAIT_IMPLICIT = Integer.parseInt(PropertiesHelpers.getValue("WAIT_IMPLICIT"));
@@ -41,6 +42,9 @@
     public static final String EXPORT_CAPTURE_PATH = PropertiesHelpers.getValue("EXPORT_CAPTURE_PATH");
     public static final String VIDEO_RECORD = PropertiesHelpers.getValue("VIDEO_RECORD");
 
+    public static final String USER_DATA_DIR = PropertiesHelpers.getValue("USER_DATA_DIR");
+    public static final String PROFILE_DIRECTORY = PropertiesHelpers.getValue("PROFILE_DIRECTORY");
+    public static final String BROWSER_BINARY = PropertiesHelpers.getValue("BROWSER_BINARY");
 
     public static final String EXTENT_REPORT_FOLDER_PATH = PROJECT_PATH + EXTENT_REPORT_FOLDER;
     public static final String EXTENT_REPORT_FILE_NAME = EXTENT_REPORT_NAME + ".html";
Index: src/main/java/org/pftest/enums/Author.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/pftest/enums/Author.java b/src/main/java/org/pftest/enums/Author.java
new file mode 100644
--- /dev/null	(date 1714047589650)
+++ b/src/main/java/org/pftest/enums/Author.java	(date 1714047589650)
@@ -0,0 +1,5 @@
+package org.pftest.enums;
+
+public enum Author {
+    QuynhNN
+}
Index: src/main/java/org/pftest/annotations/CustomAnnotation.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/pftest/annotations/CustomAnnotation.java b/src/main/java/org/pftest/annotations/CustomAnnotation.java
new file mode 100644
--- /dev/null	(date 1714047589656)
+++ b/src/main/java/org/pftest/annotations/CustomAnnotation.java	(date 1714047589656)
@@ -0,0 +1,20 @@
+package org.pftest.annotations;
+
+import org.pftest.enums.Author;
+import org.pftest.enums.Category;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.METHOD)
+public @interface CustomAnnotation {
+
+    // This is not a method
+    public Author[] author();
+
+    // public String[] category();
+    public Category[] category();
+}
Index: src/test/java/org/pftest/projects/CommonPage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.pftest.projects;\n\nimport org.openqa.selenium.By;\nimport org.pftest.projects.pages.pages.AdminShopifyPage;\nimport org.pftest.projects.pages.pages.EditorPage;\n\npublic class CommonPage {\n    private By portalContainer = By.id(\"PolarisPortalsContainer\");\n\n    private AdminShopifyPage editorPage;\n\n    public AdminShopifyPage getEditorPage() {\n        if (editorPage == null) {\n            editorPage = new AdminShopifyPage();\n        }\n        return editorPage;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/org/pftest/projects/CommonPage.java b/src/test/java/org/pftest/projects/CommonPage.java
--- a/src/test/java/org/pftest/projects/CommonPage.java	(revision 68abd430f82de6dedf2b26c3e7669a3e705fcd50)
+++ b/src/test/java/org/pftest/projects/CommonPage.java	(date 1714063846521)
@@ -1,17 +1,16 @@
 package org.pftest.projects;
 
 import org.openqa.selenium.By;
-import org.pftest.projects.pages.pages.AdminShopifyPage;
 import org.pftest.projects.pages.pages.EditorPage;
 
 public class CommonPage {
     private By portalContainer = By.id("PolarisPortalsContainer");
 
-    private AdminShopifyPage editorPage;
+    private EditorPage editorPage;
 
-    public AdminShopifyPage getEditorPage() {
+    public EditorPage getEditorPage() {
         if (editorPage == null) {
-            editorPage = new AdminShopifyPage();
+            editorPage = new EditorPage();
         }
         return editorPage;
     }
